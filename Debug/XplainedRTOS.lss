
XplainedRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001098  0000112c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001098  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009da  00800110  00800110  0000113c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000189f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000163f  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005f3  00000000  00000000  0000301d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000007bb  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000294  00000000  00000000  00003dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007c2  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d32  00000000  00000000  00004822  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000200  00000000  00000000  00005554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e9       	ldi	r30, 0x98	; 152
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 31       	cpi	r26, 0x10	; 16
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	2a e0       	ldi	r18, 0x0A	; 10
      b4:	a0 e1       	ldi	r26, 0x10	; 16
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 3e       	cpi	r26, 0xEA	; 234
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 b9 07 	call	0xf72	; 0xf72 <main>
      c6:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <idle>:
 * FUNCTIONS
 */
/**
 *  @brief The idle task does nothing but busy loop.
 */
static void idle(void) {
      ce:	ff cf       	rjmp	.-2      	; 0xce <idle>

000000d0 <exit_kernel>:
static void exit_kernel(void) {
	/*
	 * The PC was pushed on the stack with the call to this function.
	 * Now push on the I/O registers and the SREG as well.
	 */
	SAVE_CTX();
      d0:	ff 93       	push	r31
      d2:	ff b7       	in	r31, 0x3f	; 63
      d4:	f8 94       	cli
      d6:	ff 93       	push	r31
      d8:	ef 93       	push	r30
      da:	df 93       	push	r29
      dc:	cf 93       	push	r28
      de:	bf 93       	push	r27
      e0:	af 93       	push	r26
      e2:	9f 93       	push	r25
      e4:	8f 93       	push	r24
      e6:	7f 93       	push	r23
      e8:	6f 93       	push	r22
      ea:	5f 93       	push	r21
      ec:	4f 93       	push	r20
      ee:	3f 93       	push	r19
      f0:	2f 93       	push	r18
      f2:	1f 93       	push	r17
      f4:	0f 93       	push	r16
      f6:	ff 92       	push	r15
      f8:	ef 92       	push	r14
      fa:	df 92       	push	r13
      fc:	cf 92       	push	r12
      fe:	bf 92       	push	r11
     100:	af 92       	push	r10
     102:	9f 92       	push	r9
     104:	8f 92       	push	r8
     106:	7f 92       	push	r7
     108:	6f 92       	push	r6
     10a:	5f 92       	push	r5
     10c:	4f 92       	push	r4
     10e:	3f 92       	push	r3
     110:	2f 92       	push	r2
     112:	1f 92       	push	r1
     114:	0f 92       	push	r0

	/*
	 * The last piece of the context is the SP. Save it to a variable.
	 */
	kernel_sp = SP;
     116:	8d b7       	in	r24, 0x3d	; 61
     118:	9e b7       	in	r25, 0x3e	; 62
     11a:	90 93 1d 01 	sts	0x011D, r25
     11e:	80 93 1c 01 	sts	0x011C, r24

	/*
	 * Now restore the task's context, SP first.
	 */
	SP = (uint16_t) (cur_task->sp);
     122:	e0 91 1e 01 	lds	r30, 0x011E
     126:	f0 91 1f 01 	lds	r31, 0x011F
     12a:	f3 95       	inc	r31
     12c:	80 81       	ld	r24, Z
     12e:	91 81       	ldd	r25, Z+1	; 0x01
     130:	9e bf       	out	0x3e, r25	; 62
     132:	8d bf       	out	0x3d, r24	; 61

	/*
	 * Now restore I/O and SREG registers.
	 */
	RESTORE_CTX();
     134:	0f 90       	pop	r0
     136:	1f 90       	pop	r1
     138:	2f 90       	pop	r2
     13a:	3f 90       	pop	r3
     13c:	4f 90       	pop	r4
     13e:	5f 90       	pop	r5
     140:	6f 90       	pop	r6
     142:	7f 90       	pop	r7
     144:	8f 90       	pop	r8
     146:	9f 90       	pop	r9
     148:	af 90       	pop	r10
     14a:	bf 90       	pop	r11
     14c:	cf 90       	pop	r12
     14e:	df 90       	pop	r13
     150:	ef 90       	pop	r14
     152:	ff 90       	pop	r15
     154:	0f 91       	pop	r16
     156:	1f 91       	pop	r17
     158:	2f 91       	pop	r18
     15a:	3f 91       	pop	r19
     15c:	4f 91       	pop	r20
     15e:	5f 91       	pop	r21
     160:	6f 91       	pop	r22
     162:	7f 91       	pop	r23
     164:	8f 91       	pop	r24
     166:	9f 91       	pop	r25
     168:	af 91       	pop	r26
     16a:	bf 91       	pop	r27
     16c:	cf 91       	pop	r28
     16e:	df 91       	pop	r29
     170:	ef 91       	pop	r30
     172:	ff 91       	pop	r31
     174:	ff bf       	out	0x3f, r31	; 63
     176:	ff 91       	pop	r31
	 * enable them here.
	 *
	 * The last piece of the context, the PC, is popped off the stack
	 * with the ret instruction.
	 */
	asm volatile ("ret\n"::);
     178:	08 95       	ret

0000017a <enter_kernel>:
static void enter_kernel(void) {
	/*
	 * The PC was pushed on the stack with the call to this function.
	 * Now push on the I/O registers and the SREG as well.
	 */
	SAVE_CTX();
     17a:	ff 93       	push	r31
     17c:	ff b7       	in	r31, 0x3f	; 63
     17e:	f8 94       	cli
     180:	ff 93       	push	r31
     182:	ef 93       	push	r30
     184:	df 93       	push	r29
     186:	cf 93       	push	r28
     188:	bf 93       	push	r27
     18a:	af 93       	push	r26
     18c:	9f 93       	push	r25
     18e:	8f 93       	push	r24
     190:	7f 93       	push	r23
     192:	6f 93       	push	r22
     194:	5f 93       	push	r21
     196:	4f 93       	push	r20
     198:	3f 93       	push	r19
     19a:	2f 93       	push	r18
     19c:	1f 93       	push	r17
     19e:	0f 93       	push	r16
     1a0:	ff 92       	push	r15
     1a2:	ef 92       	push	r14
     1a4:	df 92       	push	r13
     1a6:	cf 92       	push	r12
     1a8:	bf 92       	push	r11
     1aa:	af 92       	push	r10
     1ac:	9f 92       	push	r9
     1ae:	8f 92       	push	r8
     1b0:	7f 92       	push	r7
     1b2:	6f 92       	push	r6
     1b4:	5f 92       	push	r5
     1b6:	4f 92       	push	r4
     1b8:	3f 92       	push	r3
     1ba:	2f 92       	push	r2
     1bc:	1f 92       	push	r1
     1be:	0f 92       	push	r0

	/*
	 * The last piece of the context is the SP. Save it to a variable.
	 */
	cur_task->sp = (uint8_t*) SP;
     1c0:	e0 91 1e 01 	lds	r30, 0x011E
     1c4:	f0 91 1f 01 	lds	r31, 0x011F
     1c8:	8d b7       	in	r24, 0x3d	; 61
     1ca:	9e b7       	in	r25, 0x3e	; 62
     1cc:	f3 95       	inc	r31
     1ce:	91 83       	std	Z+1, r25	; 0x01
     1d0:	80 83       	st	Z, r24

	/*
	 * Now restore the kernel's context, SP first.
	 */
	SP = kernel_sp;
     1d2:	80 91 1c 01 	lds	r24, 0x011C
     1d6:	90 91 1d 01 	lds	r25, 0x011D
     1da:	9e bf       	out	0x3e, r25	; 62
     1dc:	8d bf       	out	0x3d, r24	; 61

	/*
	 * Now restore I/O and SREG registers.
	 */
	RESTORE_CTX();
     1de:	0f 90       	pop	r0
     1e0:	1f 90       	pop	r1
     1e2:	2f 90       	pop	r2
     1e4:	3f 90       	pop	r3
     1e6:	4f 90       	pop	r4
     1e8:	5f 90       	pop	r5
     1ea:	6f 90       	pop	r6
     1ec:	7f 90       	pop	r7
     1ee:	8f 90       	pop	r8
     1f0:	9f 90       	pop	r9
     1f2:	af 90       	pop	r10
     1f4:	bf 90       	pop	r11
     1f6:	cf 90       	pop	r12
     1f8:	df 90       	pop	r13
     1fa:	ef 90       	pop	r14
     1fc:	ff 90       	pop	r15
     1fe:	0f 91       	pop	r16
     200:	1f 91       	pop	r17
     202:	2f 91       	pop	r18
     204:	3f 91       	pop	r19
     206:	4f 91       	pop	r20
     208:	5f 91       	pop	r21
     20a:	6f 91       	pop	r22
     20c:	7f 91       	pop	r23
     20e:	8f 91       	pop	r24
     210:	9f 91       	pop	r25
     212:	af 91       	pop	r26
     214:	bf 91       	pop	r27
     216:	cf 91       	pop	r28
     218:	df 91       	pop	r29
     21a:	ef 91       	pop	r30
     21c:	ff 91       	pop	r31
     21e:	ff bf       	out	0x3f, r31	; 63
     220:	ff 91       	pop	r31
	 * return explicitly required as we are "naked".
	 *
	 * The last piece of the context, the PC, is popped off the stack
	 * with the ret instruction.
	 */
	asm volatile ("ret\n"::);
     222:	08 95       	ret

00000224 <enqueue>:
 * @brief Add a task the head of the queue
 *
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add) {
     224:	fc 01       	movw	r30, r24
	task_to_add->next = NULL;
     226:	db 01       	movw	r26, r22
     228:	a9 5f       	subi	r26, 0xF9	; 249
     22a:	be 4f       	sbci	r27, 0xFE	; 254
     22c:	1d 92       	st	X+, r1
     22e:	1c 92       	st	X, r1

	if (queue_ptr->head == NULL) {
     230:	80 81       	ld	r24, Z
     232:	91 81       	ldd	r25, Z+1	; 0x01
     234:	89 2b       	or	r24, r25
     236:	29 f4       	brne	.+10     	; 0x242 <enqueue+0x1e>
		/* empty queue */
		queue_ptr->head = task_to_add;
     238:	71 83       	std	Z+1, r23	; 0x01
     23a:	60 83       	st	Z, r22
		queue_ptr->tail = task_to_add;
     23c:	73 83       	std	Z+3, r23	; 0x03
     23e:	62 83       	std	Z+2, r22	; 0x02
     240:	08 95       	ret
	} else {
		/* put task at the back of the queue */
		queue_ptr->tail->next = task_to_add;
     242:	a2 81       	ldd	r26, Z+2	; 0x02
     244:	b3 81       	ldd	r27, Z+3	; 0x03
     246:	a9 5f       	subi	r26, 0xF9	; 249
     248:	be 4f       	sbci	r27, 0xFE	; 254
     24a:	6d 93       	st	X+, r22
     24c:	7c 93       	st	X, r23
		queue_ptr->tail = task_to_add;
     24e:	73 83       	std	Z+3, r23	; 0x03
     250:	62 83       	std	Z+2, r22	; 0x02
     252:	08 95       	ret

00000254 <dequeue>:
 *
 * @param queue_ptr the queue to pop
 * @return the popped task descriptor
 */
static task_descriptor_t* dequeue(queue_t* queue_ptr) {
	task_descriptor_t* task_ptr = queue_ptr->head;
     254:	dc 01       	movw	r26, r24
     256:	2d 91       	ld	r18, X+
     258:	3c 91       	ld	r19, X
     25a:	11 97       	sbiw	r26, 0x01	; 1

	if (queue_ptr->head != NULL) {
     25c:	21 15       	cp	r18, r1
     25e:	31 05       	cpc	r19, r1
     260:	49 f0       	breq	.+18     	; 0x274 <dequeue+0x20>
		queue_ptr->head = queue_ptr->head->next;
     262:	f9 01       	movw	r30, r18
     264:	e9 5f       	subi	r30, 0xF9	; 249
     266:	fe 4f       	sbci	r31, 0xFE	; 254
     268:	40 81       	ld	r20, Z
     26a:	51 81       	ldd	r21, Z+1	; 0x01
     26c:	4d 93       	st	X+, r20
     26e:	5c 93       	st	X, r21
		task_ptr->next = NULL;
     270:	11 82       	std	Z+1, r1	; 0x01
     272:	10 82       	st	Z, r1
	}

	return task_ptr;
}
     274:	82 2f       	mov	r24, r18
     276:	93 2f       	mov	r25, r19
     278:	08 95       	ret

0000027a <Task_Terminate>:
}

/**
 * @brief The calling task terminates itself.
 */
void Task_Terminate() {
     27a:	cf 93       	push	r28
	uint8_t sreg;

	sreg = SREG;
     27c:	cf b7       	in	r28, 0x3f	; 63
	cli();
     27e:	f8 94       	cli

	kernel_request = TASK_TERMINATE;
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	80 93 1b 01 	sts	0x011B, r24
	enter_kernel();
     286:	0e 94 bd 00 	call	0x17a	; 0x17a <enter_kernel>

	SREG = sreg;
     28a:	cf bf       	out	0x3f, r28	; 63
}
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <__vector_13>:
	 * of SREG. We know it should have interrupts enabled because this
	 * ISR was able to execute, but it has interrupts disabled because
	 * it was stored while this ISR was executing. So we set the bit (I = bit 7)
	 * in the stored value.
	 */
	SAVE_CTX_TOP();
     290:	ff 93       	push	r31
     292:	ff b7       	in	r31, 0x3f	; 63
     294:	f8 94       	cli

	STACK_SREG_SET_I_BIT();
     296:	f0 68       	ori	r31, 0x80	; 128

	SAVE_CTX_BOTTOM();
     298:	ff 93       	push	r31
     29a:	ef 93       	push	r30
     29c:	df 93       	push	r29
     29e:	cf 93       	push	r28
     2a0:	bf 93       	push	r27
     2a2:	af 93       	push	r26
     2a4:	9f 93       	push	r25
     2a6:	8f 93       	push	r24
     2a8:	7f 93       	push	r23
     2aa:	6f 93       	push	r22
     2ac:	5f 93       	push	r21
     2ae:	4f 93       	push	r20
     2b0:	3f 93       	push	r19
     2b2:	2f 93       	push	r18
     2b4:	1f 93       	push	r17
     2b6:	0f 93       	push	r16
     2b8:	ff 92       	push	r15
     2ba:	ef 92       	push	r14
     2bc:	df 92       	push	r13
     2be:	cf 92       	push	r12
     2c0:	bf 92       	push	r11
     2c2:	af 92       	push	r10
     2c4:	9f 92       	push	r9
     2c6:	8f 92       	push	r8
     2c8:	7f 92       	push	r7
     2ca:	6f 92       	push	r6
     2cc:	5f 92       	push	r5
     2ce:	4f 92       	push	r4
     2d0:	3f 92       	push	r3
     2d2:	2f 92       	push	r2
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0

	cur_task->sp = (uint8_t*) SP;
     2d8:	e0 91 1e 01 	lds	r30, 0x011E
     2dc:	f0 91 1f 01 	lds	r31, 0x011F
     2e0:	8d b7       	in	r24, 0x3d	; 61
     2e2:	9e b7       	in	r25, 0x3e	; 62
     2e4:	f3 95       	inc	r31
     2e6:	91 83       	std	Z+1, r25	; 0x01
     2e8:	80 83       	st	Z, r24
	/*
	 * Now that we already saved a copy of the stack pointer
	 * for every context including the kernel, we can move to
	 * the kernel stack and use it. We will restore it again later.
	 */
	SP = kernel_sp;
     2ea:	80 91 1c 01 	lds	r24, 0x011C
     2ee:	90 91 1d 01 	lds	r25, 0x011D
     2f2:	9e bf       	out	0x3e, r25	; 62
     2f4:	8d bf       	out	0x3d, r24	; 61

	/*
	 * Inform the kernel that this task was interrupted.
	 */
	kernel_request = TIMER_EXPIRED;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 1b 01 	sts	0x011B, r24

	/*
	 * Prepare for next tick interrupt.
	 */
	OCR1A += TICK_CYCLES;
     2fc:	e8 e8       	ldi	r30, 0x88	; 136
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	80 81       	ld	r24, Z
     302:	91 81       	ldd	r25, Z+1	; 0x01
     304:	81 50       	subi	r24, 0x01	; 1
     306:	98 42       	sbci	r25, 0x28	; 40
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24

	/*
	 * Restore the kernel context. (The stack pointer is restored again.)
	 */
	SP = kernel_sp;
     30c:	80 91 1c 01 	lds	r24, 0x011C
     310:	90 91 1d 01 	lds	r25, 0x011D
     314:	9e bf       	out	0x3e, r25	; 62
     316:	8d bf       	out	0x3d, r24	; 61

	/*
	 * Now restore I/O and SREG registers.
	 */
	RESTORE_CTX();
     318:	0f 90       	pop	r0
     31a:	1f 90       	pop	r1
     31c:	2f 90       	pop	r2
     31e:	3f 90       	pop	r3
     320:	4f 90       	pop	r4
     322:	5f 90       	pop	r5
     324:	6f 90       	pop	r6
     326:	7f 90       	pop	r7
     328:	8f 90       	pop	r8
     32a:	9f 90       	pop	r9
     32c:	af 90       	pop	r10
     32e:	bf 90       	pop	r11
     330:	cf 90       	pop	r12
     332:	df 90       	pop	r13
     334:	ef 90       	pop	r14
     336:	ff 90       	pop	r15
     338:	0f 91       	pop	r16
     33a:	1f 91       	pop	r17
     33c:	2f 91       	pop	r18
     33e:	3f 91       	pop	r19
     340:	4f 91       	pop	r20
     342:	5f 91       	pop	r21
     344:	6f 91       	pop	r22
     346:	7f 91       	pop	r23
     348:	8f 91       	pop	r24
     34a:	9f 91       	pop	r25
     34c:	af 91       	pop	r26
     34e:	bf 91       	pop	r27
     350:	cf 91       	pop	r28
     352:	df 91       	pop	r29
     354:	ef 91       	pop	r30
     356:	ff 91       	pop	r31
     358:	ff bf       	out	0x3f, r31	; 63
     35a:	ff 91       	pop	r31
	 * Explilictly required as we are "naked".
	 *
	 * The last piece of the context, the PC, is popped off the stack
	 * with the ret instruction.
	 */
	asm volatile ("ret\n"::);
     35c:	08 95       	ret

0000035e <OS_Abort>:
 */
void OS_Abort(void) {
	uint8_t i, j;
	uint8_t flashes, mask;

	cli();
     35e:	f8 94       	cli

	/* Initialize port for output */
	LED_DDR = LED_RED_MASK | LED_GREEN_MASK;
     360:	86 e0       	ldi	r24, 0x06	; 6
     362:	84 b9       	out	0x04, r24	; 4

	if (error_msg < ERR_RUN_1_USER_CALLED_OS_ABORT) {
     364:	80 91 00 01 	lds	r24, 0x0100
     368:	86 30       	cpi	r24, 0x06	; 6
     36a:	28 f4       	brcc	.+10     	; 0x376 <OS_Abort+0x18>
		flashes = error_msg + 1;
     36c:	30 91 00 01 	lds	r19, 0x0100
     370:	3f 5f       	subi	r19, 0xFF	; 255
		mask = LED_GREEN_MASK;
     372:	44 e0       	ldi	r20, 0x04	; 4
     374:	04 c0       	rjmp	.+8      	; 0x37e <OS_Abort+0x20>
	} else {
		flashes = error_msg + 1 - ERR_RUN_1_USER_CALLED_OS_ABORT;
     376:	30 91 00 01 	lds	r19, 0x0100
     37a:	35 50       	subi	r19, 0x05	; 5
		mask = LED_RED_MASK;
     37c:	42 e0       	ldi	r20, 0x02	; 2
	}

	for (;;) {
		LED_PORT = (uint8_t) (LED_RED_MASK| LED_GREEN_MASK);
     37e:	76 e0       	ldi	r23, 0x06	; 6
     380:	64 e6       	ldi	r22, 0x64	; 100
		for (i = 0; i < 40; ++i) {
			_delay_ms(25);
		}

		for (j = 0; j < flashes; ++j) {
			LED_PORT = mask;
     382:	2a e0       	ldi	r18, 0x0A	; 10

			for (i = 0; i < 10; ++i) {
				_delay_ms(25);
			}

			LED_PORT = (uint8_t) 0;
     384:	54 e1       	ldi	r21, 0x14	; 20
		flashes = error_msg + 1 - ERR_RUN_1_USER_CALLED_OS_ABORT;
		mask = LED_RED_MASK;
	}

	for (;;) {
		LED_PORT = (uint8_t) (LED_RED_MASK| LED_GREEN_MASK);
     386:	75 b9       	out	0x05, r23	; 5
     388:	86 2f       	mov	r24, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     38a:	9f ef       	ldi	r25, 0xFF	; 255
     38c:	a7 ed       	ldi	r26, 0xD7	; 215
     38e:	e0 e0       	ldi	r30, 0x00	; 0
     390:	91 50       	subi	r25, 0x01	; 1
     392:	a0 40       	sbci	r26, 0x00	; 0
     394:	e0 40       	sbci	r30, 0x00	; 0
     396:	e1 f7       	brne	.-8      	; 0x390 <OS_Abort+0x32>
     398:	00 c0       	rjmp	.+0      	; 0x39a <OS_Abort+0x3c>
     39a:	00 00       	nop
     39c:	81 50       	subi	r24, 0x01	; 1

		for (i = 0; i < 100; ++i) {
     39e:	a9 f7       	brne	.-22     	; 0x38a <OS_Abort+0x2c>
			_delay_ms(25);
		}

		LED_PORT = (uint8_t) 0;
     3a0:	15 b8       	out	0x05, r1	; 5
     3a2:	88 e2       	ldi	r24, 0x28	; 40
     3a4:	ff ef       	ldi	r31, 0xFF	; 255
     3a6:	97 ed       	ldi	r25, 0xD7	; 215
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
     3aa:	f1 50       	subi	r31, 0x01	; 1
     3ac:	90 40       	sbci	r25, 0x00	; 0
     3ae:	a0 40       	sbci	r26, 0x00	; 0
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <OS_Abort+0x4c>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <OS_Abort+0x56>
     3b4:	00 00       	nop
     3b6:	81 50       	subi	r24, 0x01	; 1

		for (i = 0; i < 40; ++i) {
     3b8:	a9 f7       	brne	.-22     	; 0x3a4 <OS_Abort+0x46>
			_delay_ms(25);
		}

		for (j = 0; j < flashes; ++j) {
     3ba:	33 23       	and	r19, r19
     3bc:	59 f1       	breq	.+86     	; 0x414 <OS_Abort+0xb6>
     3be:	90 e0       	ldi	r25, 0x00	; 0
			LED_PORT = mask;
     3c0:	45 b9       	out	0x05, r20	; 5
     3c2:	82 2f       	mov	r24, r18
     3c4:	ef ef       	ldi	r30, 0xFF	; 255
     3c6:	f7 ed       	ldi	r31, 0xD7	; 215
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	e1 50       	subi	r30, 0x01	; 1
     3cc:	f0 40       	sbci	r31, 0x00	; 0
     3ce:	a0 40       	sbci	r26, 0x00	; 0
     3d0:	e1 f7       	brne	.-8      	; 0x3ca <OS_Abort+0x6c>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <OS_Abort+0x76>
     3d4:	00 00       	nop
     3d6:	81 50       	subi	r24, 0x01	; 1

			for (i = 0; i < 10; ++i) {
     3d8:	a9 f7       	brne	.-22     	; 0x3c4 <OS_Abort+0x66>
				_delay_ms(25);
			}

			LED_PORT = (uint8_t) 0;
     3da:	15 b8       	out	0x05, r1	; 5
     3dc:	82 2f       	mov	r24, r18
     3de:	ef ef       	ldi	r30, 0xFF	; 255
     3e0:	f7 ed       	ldi	r31, 0xD7	; 215
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	e1 50       	subi	r30, 0x01	; 1
     3e6:	f0 40       	sbci	r31, 0x00	; 0
     3e8:	a0 40       	sbci	r26, 0x00	; 0
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <OS_Abort+0x86>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <OS_Abort+0x90>
     3ee:	00 00       	nop
     3f0:	81 50       	subi	r24, 0x01	; 1

			for (i = 0; i < 10; ++i) {
     3f2:	a9 f7       	brne	.-22     	; 0x3de <OS_Abort+0x80>

		for (i = 0; i < 40; ++i) {
			_delay_ms(25);
		}

		for (j = 0; j < flashes; ++j) {
     3f4:	9f 5f       	subi	r25, 0xFF	; 255
     3f6:	93 13       	cpse	r25, r19
     3f8:	e3 cf       	rjmp	.-58     	; 0x3c0 <OS_Abort+0x62>
     3fa:	0c c0       	rjmp	.+24     	; 0x414 <OS_Abort+0xb6>
     3fc:	ef ef       	ldi	r30, 0xFF	; 255
     3fe:	f7 ed       	ldi	r31, 0xD7	; 215
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	e1 50       	subi	r30, 0x01	; 1
     404:	f0 40       	sbci	r31, 0x00	; 0
     406:	90 40       	sbci	r25, 0x00	; 0
     408:	e1 f7       	brne	.-8      	; 0x402 <OS_Abort+0xa4>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <OS_Abort+0xae>
     40c:	00 00       	nop
     40e:	81 50       	subi	r24, 0x01	; 1
			for (i = 0; i < 10; ++i) {
				_delay_ms(25);
			}
		}

		for (i = 0; i < 20; ++i) {
     410:	a9 f7       	brne	.-22     	; 0x3fc <OS_Abort+0x9e>
     412:	b9 cf       	rjmp	.-142    	; 0x386 <OS_Abort+0x28>

			for (i = 0; i < 10; ++i) {
				_delay_ms(25);
			}

			LED_PORT = (uint8_t) 0;
     414:	85 2f       	mov	r24, r21
     416:	f2 cf       	rjmp	.-28     	; 0x3fc <OS_Abort+0x9e>

00000418 <kernel_create_task>:
static int kernel_create_task() {
	/* The new task. */
	task_descriptor_t *p;
	uint8_t* stack_bottom;

	if (dead_pool_queue.head == NULL) {
     418:	80 91 a7 0a 	lds	r24, 0x0AA7
     41c:	90 91 a8 0a 	lds	r25, 0x0AA8
     420:	89 2b       	or	r24, r25
     422:	09 f4       	brne	.+2      	; 0x426 <kernel_create_task+0xe>
     424:	a7 c0       	rjmp	.+334    	; 0x574 <kernel_create_task+0x15c>
		/* Too many tasks! */
		return 0;
	}

	if (kernel_request_create_args.level == PERIODIC
     426:	80 91 19 01 	lds	r24, 0x0119
     42a:	82 30       	cpi	r24, 0x02	; 2
     42c:	69 f4       	brne	.+26     	; 0x448 <kernel_create_task+0x30>
			&& (kernel_request_create_args.name == IDLE
     42e:	80 91 1a 01 	lds	r24, 0x011A
     432:	88 23       	and	r24, r24
     434:	21 f0       	breq	.+8      	; 0x43e <kernel_create_task+0x26>
					|| kernel_request_create_args.name > MAXNAME)) {
     436:	80 91 1a 01 	lds	r24, 0x011A
     43a:	89 30       	cpi	r24, 0x09	; 9
     43c:	28 f0       	brcs	.+10     	; 0x448 <kernel_create_task+0x30>
		/* PERIODIC name is out of range [1 .. MAXNAME] */
		error_msg = ERR_2_CREATE_NAME_OUT_OF_RANGE;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	80 93 00 01 	sts	0x0100, r24
		OS_Abort();
     444:	0e 94 af 01 	call	0x35e	; 0x35e <OS_Abort>
	}

	if (kernel_request_create_args.level == PERIODIC
     448:	80 91 19 01 	lds	r24, 0x0119
     44c:	82 30       	cpi	r24, 0x02	; 2
     44e:	69 f4       	brne	.+26     	; 0x46a <kernel_create_task+0x52>
			&& name_in_PPP[kernel_request_create_args.name] == 0) {
     450:	e0 91 1a 01 	lds	r30, 0x011A
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	ef 54       	subi	r30, 0x4F	; 79
     458:	f5 4f       	sbci	r31, 0xF5	; 245
     45a:	80 81       	ld	r24, Z
     45c:	81 11       	cpse	r24, r1
     45e:	05 c0       	rjmp	.+10     	; 0x46a <kernel_create_task+0x52>
		error_msg = ERR_5_NAME_NOT_IN_PPP;
     460:	84 e0       	ldi	r24, 0x04	; 4
     462:	80 93 00 01 	sts	0x0100, r24
		OS_Abort();
     466:	0e 94 af 01 	call	0x35e	; 0x35e <OS_Abort>
	}

	if (kernel_request_create_args.level == PERIODIC
     46a:	80 91 19 01 	lds	r24, 0x0119
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	81 f4       	brne	.+32     	; 0x492 <kernel_create_task+0x7a>
			&& name_to_task_ptr[kernel_request_create_args.name] != NULL) {
     472:	e0 91 1a 01 	lds	r30, 0x011A
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	ee 0f       	add	r30, r30
     47a:	ff 1f       	adc	r31, r31
     47c:	eb 56       	subi	r30, 0x6B	; 107
     47e:	f5 4f       	sbci	r31, 0xF5	; 245
     480:	80 81       	ld	r24, Z
     482:	91 81       	ldd	r25, Z+1	; 0x01
     484:	89 2b       	or	r24, r25
     486:	29 f0       	breq	.+10     	; 0x492 <kernel_create_task+0x7a>
		/* PERIODIC name already used */
		error_msg = ERR_4_PERIODIC_NAME_IN_USE;
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	80 93 00 01 	sts	0x0100, r24
		OS_Abort();
     48e:	0e 94 af 01 	call	0x35e	; 0x35e <OS_Abort>
	}

	/* idling "task" goes in last descriptor. */
	if (kernel_request_create_args.level == NULL) {
     492:	80 91 19 01 	lds	r24, 0x0119
     496:	88 23       	and	r24, r24
     498:	31 f0       	breq	.+12     	; 0x4a6 <kernel_create_task+0x8e>
		p = &task_desc[MAXPROCESS];
	}
	/* Find an unused descriptor. */
	else {
		p = dequeue(&dead_pool_queue);
     49a:	87 ea       	ldi	r24, 0xA7	; 167
     49c:	9a e0       	ldi	r25, 0x0A	; 10
     49e:	0e 94 2a 01 	call	0x254	; 0x254 <dequeue>
     4a2:	bc 01       	movw	r22, r24
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <kernel_create_task+0x92>
		OS_Abort();
	}

	/* idling "task" goes in last descriptor. */
	if (kernel_request_create_args.level == NULL) {
		p = &task_desc[MAXPROCESS];
     4a6:	68 e8       	ldi	r22, 0x88	; 136
     4a8:	79 e0       	ldi	r23, 0x09	; 9
	 *   the address of the start of the task to "return" to the first time it runs,
	 *   register 31,
	 *   the stored SREG, and
	 *   registers 30 to 0.
	 */
	uint8_t* stack_top = stack_bottom - (32 + 1 + 2 + 2);
     4aa:	9b 01       	movw	r18, r22
     4ac:	26 52       	subi	r18, 0x26	; 38
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
	/* Not necessary to clear the task descriptor. */
	/* memset(p,0,sizeof(task_descriptor_t)); */

	/* stack_top[0] is the byte above the stack.
	 * stack_top[1] is r0. */
	stack_top[2] = (uint8_t) 0; /* r1 is the "zero" register. */
     4b0:	fb 01       	movw	r30, r22
     4b2:	e4 52       	subi	r30, 0x24	; 36
     4b4:	ff 4f       	sbci	r31, 0xFF	; 255
     4b6:	10 82       	st	Z, r1
	/* stack_top[31] is r30. */
	stack_top[32] = (uint8_t) _BV(SREG_I); /* set SREG_I bit in stored SREG. */
     4b8:	fb 01       	movw	r30, r22
     4ba:	e6 50       	subi	r30, 0x06	; 6
     4bc:	ff 4f       	sbci	r31, 0xFF	; 255
     4be:	80 e8       	ldi	r24, 0x80	; 128
     4c0:	80 83       	st	Z, r24
	 * onto the stack in reverse byte order (least significant first, followed
	 * by most significant).  This is because the "return" assembly instructions
	 * (ret and reti) pop addresses off in BIG ENDIAN (most sig. first, least sig.
	 * second), even though the AT90 is LITTLE ENDIAN machine.
	 */
	stack_top[34] = (uint8_t) ((uint16_t) (kernel_request_create_args.f) >> 8);
     4c2:	e5 e1       	ldi	r30, 0x15	; 21
     4c4:	f1 e0       	ldi	r31, 0x01	; 1
     4c6:	80 81       	ld	r24, Z
     4c8:	91 81       	ldd	r25, Z+1	; 0x01
     4ca:	db 01       	movw	r26, r22
     4cc:	a4 50       	subi	r26, 0x04	; 4
     4ce:	bf 4f       	sbci	r27, 0xFF	; 255
     4d0:	9c 93       	st	X, r25
	stack_top[35] = (uint8_t) (uint16_t) (kernel_request_create_args.f);
     4d2:	80 81       	ld	r24, Z
     4d4:	91 81       	ldd	r25, Z+1	; 0x01
     4d6:	fb 01       	movw	r30, r22
     4d8:	e3 50       	subi	r30, 0x03	; 3
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	80 83       	st	Z, r24
	stack_top[36] = (uint8_t) ((uint16_t) Task_Terminate >> 8);
     4de:	fb 01       	movw	r30, r22
     4e0:	e2 50       	subi	r30, 0x02	; 2
     4e2:	ff 4f       	sbci	r31, 0xFF	; 255
     4e4:	8d e3       	ldi	r24, 0x3D	; 61
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	90 83       	st	Z, r25
	stack_top[37] = (uint8_t) (uint16_t) Task_Terminate;
     4ea:	fb 01       	movw	r30, r22
     4ec:	e1 50       	subi	r30, 0x01	; 1
     4ee:	ff 4f       	sbci	r31, 0xFF	; 255
     4f0:	80 83       	st	Z, r24

	/*
	 * Make stack pointer point to cell above stack (the top).
	 * Make room for 32 registers, SREG and two return addresses.
	 */
	p->sp = stack_top;
     4f2:	fb 01       	movw	r30, r22
     4f4:	f3 95       	inc	r31
     4f6:	31 83       	std	Z+1, r19	; 0x01
     4f8:	20 83       	st	Z, r18

	p->state = READY;
     4fa:	fb 01       	movw	r30, r22
     4fc:	ed 5f       	subi	r30, 0xFD	; 253
     4fe:	fe 4f       	sbci	r31, 0xFE	; 254
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	80 83       	st	Z, r24
	p->arg = kernel_request_create_args.arg;
     504:	80 91 17 01 	lds	r24, 0x0117
     508:	90 91 18 01 	lds	r25, 0x0118
     50c:	fb 01       	movw	r30, r22
     50e:	ec 5f       	subi	r30, 0xFC	; 252
     510:	fe 4f       	sbci	r31, 0xFE	; 254
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	80 83       	st	Z, r24
	p->level = kernel_request_create_args.level;
     516:	e9 e1       	ldi	r30, 0x19	; 25
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	80 81       	ld	r24, Z
     51c:	db 01       	movw	r26, r22
     51e:	aa 5f       	subi	r26, 0xFA	; 250
     520:	be 4f       	sbci	r27, 0xFE	; 254
     522:	8c 93       	st	X, r24
	p->name = kernel_request_create_args.name;
     524:	80 91 1a 01 	lds	r24, 0x011A
     528:	db 01       	movw	r26, r22
     52a:	ae 5f       	subi	r26, 0xFE	; 254
     52c:	be 4f       	sbci	r27, 0xFE	; 254
     52e:	8c 93       	st	X, r24

	switch (kernel_request_create_args.level) {
     530:	80 81       	ld	r24, Z
     532:	82 30       	cpi	r24, 0x02	; 2
     534:	29 f0       	breq	.+10     	; 0x540 <kernel_create_task+0x128>
     536:	83 30       	cpi	r24, 0x03	; 3
     538:	79 f0       	breq	.+30     	; 0x558 <kernel_create_task+0x140>
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	f1 f4       	brne	.+60     	; 0x57a <kernel_create_task+0x162>
     53e:	13 c0       	rjmp	.+38     	; 0x566 <kernel_create_task+0x14e>
	case PERIODIC:
		/* Put this newly created PPP task into the PPP lookup array */
		name_to_task_ptr[kernel_request_create_args.name] = p;
     540:	e0 91 1a 01 	lds	r30, 0x011A
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	ee 0f       	add	r30, r30
     548:	ff 1f       	adc	r31, r31
     54a:	eb 56       	subi	r30, 0x6B	; 107
     54c:	f5 4f       	sbci	r31, 0xF5	; 245
     54e:	71 83       	std	Z+1, r23	; 0x01
     550:	60 83       	st	Z, r22
	default:
		/* idle task does not go in a queue */
		break;
	}

	return 1;
     552:	21 e0       	ldi	r18, 0x01	; 1
     554:	30 e0       	ldi	r19, 0x00	; 0

	switch (kernel_request_create_args.level) {
	case PERIODIC:
		/* Put this newly created PPP task into the PPP lookup array */
		name_to_task_ptr[kernel_request_create_args.name] = p;
		break;
     556:	13 c0       	rjmp	.+38     	; 0x57e <kernel_create_task+0x166>

	case SYSTEM:
		/* Put SYSTEM and Round Robin tasks on a queue. */
		enqueue(&system_queue, p);
     558:	8b ea       	ldi	r24, 0xAB	; 171
     55a:	9a e0       	ldi	r25, 0x0A	; 10
     55c:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
	default:
		/* idle task does not go in a queue */
		break;
	}

	return 1;
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	30 e0       	ldi	r19, 0x00	; 0
		break;

	case SYSTEM:
		/* Put SYSTEM and Round Robin tasks on a queue. */
		enqueue(&system_queue, p);
		break;
     564:	0c c0       	rjmp	.+24     	; 0x57e <kernel_create_task+0x166>

	case RR:
		/* Put SYSTEM and Round Robin tasks on a queue. */
		enqueue(&rr_queue, p);
     566:	8a eb       	ldi	r24, 0xBA	; 186
     568:	9a e0       	ldi	r25, 0x0A	; 10
     56a:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
	default:
		/* idle task does not go in a queue */
		break;
	}

	return 1;
     56e:	21 e0       	ldi	r18, 0x01	; 1
     570:	30 e0       	ldi	r19, 0x00	; 0
		break;

	case RR:
		/* Put SYSTEM and Round Robin tasks on a queue. */
		enqueue(&rr_queue, p);
		break;
     572:	05 c0       	rjmp	.+10     	; 0x57e <kernel_create_task+0x166>
	task_descriptor_t *p;
	uint8_t* stack_bottom;

	if (dead_pool_queue.head == NULL) {
		/* Too many tasks! */
		return 0;
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	02 c0       	rjmp	.+4      	; 0x57e <kernel_create_task+0x166>
	default:
		/* idle task does not go in a queue */
		break;
	}

	return 1;
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	30 e0       	ldi	r19, 0x00	; 0
}
     57e:	82 2f       	mov	r24, r18
     580:	93 2f       	mov	r25, r19
     582:	08 95       	ret

00000584 <kernel_event_signal>:
 * @brief Kernel function to signal waiting processes.
 *
 * Handles signals and broadcasts, with or without yielding.
 * May cause current task to be suspended.
 */
static void kernel_event_signal(uint8_t is_broadcast, uint8_t and_next) {
     584:	9f 92       	push	r9
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	b8 2e       	mov	r11, r24
	/* Check the handle of the event to ensure that it is initialized. */
	uint8_t handle = (uint8_t) ((uint16_t) (kernel_request_event_ptr) - 1);
     59c:	00 91 c1 0a 	lds	r16, 0x0AC1
     5a0:	01 50       	subi	r16, 0x01	; 1

	if (handle >= num_events_created) {
     5a2:	80 91 c3 0a 	lds	r24, 0x0AC3
     5a6:	08 17       	cp	r16, r24
     5a8:	28 f0       	brcs	.+10     	; 0x5b4 <kernel_event_signal+0x30>
		/* Error code. */
		error_msg = ERR_RUN_4_SIGNAL_ON_BAD_EVENT;
     5aa:	89 e0       	ldi	r24, 0x09	; 9
     5ac:	80 93 00 01 	sts	0x0100, r24
		OS_Abort();
     5b0:	0e 94 af 01 	call	0x35e	; 0x35e <OS_Abort>
	} else {
		uint8_t make_ready = 0;

		/* Signal appropriately, and perhaps place this task in a queue. */
		if (and_next) {
     5b4:	dd 24       	eor	r13, r13
     5b6:	d3 94       	inc	r13
     5b8:	61 11       	cpse	r22, r1
     5ba:	54 c0       	rjmp	.+168    	; 0x664 <kernel_event_signal+0xe0>
     5bc:	d1 2c       	mov	r13, r1
     5be:	52 c0       	rjmp	.+164    	; 0x664 <kernel_event_signal+0xe0>
			make_ready = 1;
		}

		while (event_queue[handle].head != NULL) {
			/* The signalled task */
			task_descriptor_t* task_ptr = dequeue(&event_queue[handle]);
     5c0:	c8 01       	movw	r24, r16
     5c2:	0e 94 2a 01 	call	0x254	; 0x254 <dequeue>
     5c6:	ec 01       	movw	r28, r24
			task_ptr->state = READY;
     5c8:	fc 01       	movw	r30, r24
     5ca:	ed 5f       	subi	r30, 0xFD	; 253
     5cc:	fe 4f       	sbci	r31, 0xFE	; 254
     5ce:	c0 82       	st	Z, r12

			switch (task_ptr->level) {
     5d0:	fc 01       	movw	r30, r24
     5d2:	ea 5f       	subi	r30, 0xFA	; 250
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	80 81       	ld	r24, Z
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	41 f0       	breq	.+16     	; 0x5ec <kernel_event_signal+0x68>
     5dc:	83 30       	cpi	r24, 0x03	; 3
     5de:	59 f4       	brne	.+22     	; 0x5f6 <kernel_event_signal+0x72>
			case SYSTEM:
				enqueue(&system_queue, task_ptr);
     5e0:	be 01       	movw	r22, r28
     5e2:	8b ea       	ldi	r24, 0xAB	; 171
     5e4:	9a e0       	ldi	r25, 0x0A	; 10
     5e6:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
				break;
     5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <kernel_event_signal+0x72>
			case PERIODIC:
				break;
			case RR:
				enqueue(&rr_queue, task_ptr);
     5ec:	be 01       	movw	r22, r28
     5ee:	8a eb       	ldi	r24, 0xBA	; 186
     5f0:	9a e0       	ldi	r25, 0x0A	; 10
     5f2:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
			default:
				break;
			}

			/* Check to see if current task needs to be pre-empted */
			if (cur_task != idle_task && !make_ready) {
     5f6:	20 91 1e 01 	lds	r18, 0x011E
     5fa:	30 91 1f 01 	lds	r19, 0x011F
     5fe:	89 e0       	ldi	r24, 0x09	; 9
     600:	28 38       	cpi	r18, 0x88	; 136
     602:	38 07       	cpc	r19, r24
     604:	61 f1       	breq	.+88     	; 0x65e <kernel_event_signal+0xda>
     606:	d1 10       	cpse	r13, r1
     608:	2a c0       	rjmp	.+84     	; 0x65e <kernel_event_signal+0xda>
				if (cur_task->level != SYSTEM && task_ptr->level == SYSTEM) {
     60a:	f9 01       	movw	r30, r18
     60c:	ea 5f       	subi	r30, 0xFA	; 250
     60e:	fe 4f       	sbci	r31, 0xFE	; 254
     610:	80 81       	ld	r24, Z
     612:	83 30       	cpi	r24, 0x03	; 3
     614:	21 f1       	breq	.+72     	; 0x65e <kernel_event_signal+0xda>
     616:	fe 01       	movw	r30, r28
     618:	ea 5f       	subi	r30, 0xFA	; 250
     61a:	fe 4f       	sbci	r31, 0xFE	; 254
     61c:	90 81       	ld	r25, Z
     61e:	93 30       	cpi	r25, 0x03	; 3
     620:	e9 f0       	breq	.+58     	; 0x65c <kernel_event_signal+0xd8>
					make_ready = 1;
				} else if (cur_task->level == RR && PT > 0
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	e1 f4       	brne	.+56     	; 0x65e <kernel_event_signal+0xda>
     626:	e1 14       	cp	r14, r1
     628:	f1 04       	cpc	r15, r1
     62a:	c9 f0       	breq	.+50     	; 0x65e <kernel_event_signal+0xda>
						&& slot_task_finished == 0 && task_ptr
     62c:	80 91 be 0a 	lds	r24, 0x0ABE
     630:	81 11       	cpse	r24, r1
     632:	15 c0       	rjmp	.+42     	; 0x65e <kernel_event_signal+0xda>
						== name_to_task_ptr[PPP[slot_name_index]]) {
     634:	e0 91 bf 0a 	lds	r30, 0x0ABF
     638:	f0 91 c0 0a 	lds	r31, 0x0AC0
     63c:	ed 5f       	subi	r30, 0xFD	; 253
     63e:	fe 4f       	sbci	r31, 0xFE	; 254
     640:	e0 81       	ld	r30, Z
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	eb 56       	subi	r30, 0x6B	; 107
     64a:	f5 4f       	sbci	r31, 0xF5	; 245
			/* Check to see if current task needs to be pre-empted */
			if (cur_task != idle_task && !make_ready) {
				if (cur_task->level != SYSTEM && task_ptr->level == SYSTEM) {
					make_ready = 1;
				} else if (cur_task->level == RR && PT > 0
						&& slot_task_finished == 0 && task_ptr
     64c:	da 2c       	mov	r13, r10
     64e:	80 81       	ld	r24, Z
     650:	91 81       	ldd	r25, Z+1	; 0x01
     652:	c8 17       	cp	r28, r24
     654:	d9 07       	cpc	r29, r25
     656:	19 f0       	breq	.+6      	; 0x65e <kernel_event_signal+0xda>
     658:	d9 2c       	mov	r13, r9
     65a:	01 c0       	rjmp	.+2      	; 0x65e <kernel_event_signal+0xda>
			}

			/* Check to see if current task needs to be pre-empted */
			if (cur_task != idle_task && !make_ready) {
				if (cur_task->level != SYSTEM && task_ptr->level == SYSTEM) {
					make_ready = 1;
     65c:	da 2c       	mov	r13, r10
						== name_to_task_ptr[PPP[slot_name_index]]) {
					make_ready = 1;
				}
			}

			if (!is_broadcast) {
     65e:	b1 10       	cpse	r11, r1
     660:	12 c0       	rjmp	.+36     	; 0x686 <kernel_event_signal+0x102>
     662:	17 c0       	rjmp	.+46     	; 0x692 <kernel_event_signal+0x10e>
		/* Signal appropriately, and perhaps place this task in a queue. */
		if (and_next) {
			make_ready = 1;
		}

		while (event_queue[handle].head != NULL) {
     664:	10 e0       	ldi	r17, 0x00	; 0
     666:	00 0f       	add	r16, r16
     668:	11 1f       	adc	r17, r17
     66a:	00 0f       	add	r16, r16
     66c:	11 1f       	adc	r17, r17
     66e:	08 53       	subi	r16, 0x38	; 56
     670:	15 4f       	sbci	r17, 0xF5	; 245
			/* The signalled task */
			task_descriptor_t* task_ptr = dequeue(&event_queue[handle]);
			task_ptr->state = READY;
     672:	68 94       	set
     674:	cc 24       	eor	r12, r12
     676:	c1 f8       	bld	r12, 1
			}

			/* Check to see if current task needs to be pre-empted */
			if (cur_task != idle_task && !make_ready) {
				if (cur_task->level != SYSTEM && task_ptr->level == SYSTEM) {
					make_ready = 1;
     678:	aa 24       	eor	r10, r10
     67a:	a3 94       	inc	r10
				} else if (cur_task->level == RR && PT > 0
     67c:	e0 90 01 01 	lds	r14, 0x0101
     680:	f0 90 02 01 	lds	r15, 0x0102
						&& slot_task_finished == 0 && task_ptr
     684:	91 2c       	mov	r9, r1
		/* Signal appropriately, and perhaps place this task in a queue. */
		if (and_next) {
			make_ready = 1;
		}

		while (event_queue[handle].head != NULL) {
     686:	f8 01       	movw	r30, r16
     688:	20 81       	ld	r18, Z
     68a:	31 81       	ldd	r19, Z+1	; 0x01
     68c:	23 2b       	or	r18, r19
     68e:	09 f0       	breq	.+2      	; 0x692 <kernel_event_signal+0x10e>
     690:	97 cf       	rjmp	.-210    	; 0x5c0 <kernel_event_signal+0x3c>
			if (!is_broadcast) {
				break;
			}
		}

		if (make_ready && cur_task != idle_task) {
     692:	dd 20       	and	r13, r13
     694:	b9 f0       	breq	.+46     	; 0x6c4 <kernel_event_signal+0x140>
     696:	60 91 1e 01 	lds	r22, 0x011E
     69a:	70 91 1f 01 	lds	r23, 0x011F
     69e:	f9 e0       	ldi	r31, 0x09	; 9
     6a0:	68 38       	cpi	r22, 0x88	; 136
     6a2:	7f 07       	cpc	r23, r31
     6a4:	79 f0       	breq	.+30     	; 0x6c4 <kernel_event_signal+0x140>
			cur_task->state = READY;
     6a6:	fb 01       	movw	r30, r22
     6a8:	ed 5f       	subi	r30, 0xFD	; 253
     6aa:	fe 4f       	sbci	r31, 0xFE	; 254
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	80 83       	st	Z, r24
			if (cur_task->level == RR) {
     6b0:	fb 01       	movw	r30, r22
     6b2:	ea 5f       	subi	r30, 0xFA	; 250
     6b4:	fe 4f       	sbci	r31, 0xFE	; 254
     6b6:	80 81       	ld	r24, Z
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	21 f4       	brne	.+8      	; 0x6c4 <kernel_event_signal+0x140>
				enqueue(&rr_queue, cur_task);
     6bc:	8a eb       	ldi	r24, 0xBA	; 186
     6be:	9a e0       	ldi	r25, 0x0A	; 10
     6c0:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
			}
		}
	}
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	df 90       	pop	r13
     6d2:	cf 90       	pop	r12
     6d4:	bf 90       	pop	r11
     6d6:	af 90       	pop	r10
     6d8:	9f 90       	pop	r9
     6da:	08 95       	ret

000006dc <OS_Init>:
/**
 * @brief Setup the RTOS and create main() as the first SYSTEM level task.
 *
 * Point of entry from the C runtime crt0.S.
 */
void OS_Init() {
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	00 d0       	rcall	.+0      	; 0x6e2 <OS_Init+0x6>
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
	int i;

	/* Set up the clocks */
	//CLOCK8MHZ();

	TCCR1B &= ~(_BV(CS12)| _BV(CS11));
     6e6:	e1 e8       	ldi	r30, 0x81	; 129
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	89 7f       	andi	r24, 0xF9	; 249
     6ee:	80 83       	st	Z, r24
	TCCR1B |= (_BV(CS10));		// start the timer at fclk/1
     6f0:	80 81       	ld	r24, Z
     6f2:	81 60       	ori	r24, 0x01	; 1
     6f4:	80 83       	st	Z, r24
 */
static void check_PPP_names(void) {
	uint8_t i;
	uint8_t name;

	for (i = 0; i < 2 * PT; i += 2) {
     6f6:	a0 90 01 01 	lds	r10, 0x0101
     6fa:	b0 90 02 01 	lds	r11, 0x0102
     6fe:	95 01       	movw	r18, r10
     700:	22 0f       	add	r18, r18
     702:	33 1f       	adc	r19, r19
     704:	21 15       	cp	r18, r1
     706:	31 05       	cpc	r19, r1
     708:	d1 f4       	brne	.+52     	; 0x73e <OS_Init+0x62>
     70a:	c4 c3       	rjmp	.+1928   	; 0xe94 <OS_Init+0x7b8>
		name = PPP[i];
     70c:	e4 2f       	mov	r30, r20
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	ed 5f       	subi	r30, 0xFD	; 253
     712:	fe 4f       	sbci	r31, 0xFE	; 254
     714:	e0 81       	ld	r30, Z

		/* name == IDLE or 0 < name <= MAXNAME */
		if (name <= MAXNAME) {
     716:	e9 30       	cpi	r30, 0x09	; 9
     718:	18 f0       	brcs	.+6      	; 0x720 <OS_Init+0x44>
     71a:	0d c0       	rjmp	.+26     	; 0x736 <OS_Init+0x5a>
 */
static void check_PPP_names(void) {
	uint8_t i;
	uint8_t name;

	for (i = 0; i < 2 * PT; i += 2) {
     71c:	40 e0       	ldi	r20, 0x00	; 0
		name = PPP[i];

		/* name == IDLE or 0 < name <= MAXNAME */
		if (name <= MAXNAME) {
			name_in_PPP[name] = 1;
     71e:	51 e0       	ldi	r21, 0x01	; 1
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	ef 54       	subi	r30, 0x4F	; 79
     724:	f5 4f       	sbci	r31, 0xF5	; 245
     726:	50 83       	st	Z, r21
 */
static void check_PPP_names(void) {
	uint8_t i;
	uint8_t name;

	for (i = 0; i < 2 * PT; i += 2) {
     728:	4e 5f       	subi	r20, 0xFE	; 254
     72a:	84 2f       	mov	r24, r20
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	82 17       	cp	r24, r18
     730:	93 07       	cpc	r25, r19
     732:	60 f3       	brcs	.-40     	; 0x70c <OS_Init+0x30>
     734:	af c3       	rjmp	.+1886   	; 0xe94 <OS_Init+0x7b8>

		/* name == IDLE or 0 < name <= MAXNAME */
		if (name <= MAXNAME) {
			name_in_PPP[name] = 1;
		} else {
			error_msg = ERR_1_PPP_NAME_OUT_OF_RANGE;
     736:	10 92 00 01 	sts	0x0100, r1
			OS_Abort();
     73a:	0e 94 af 01 	call	0x35e	; 0x35e <OS_Abort>
static void check_PPP_names(void) {
	uint8_t i;
	uint8_t name;

	for (i = 0; i < 2 * PT; i += 2) {
		name = PPP[i];
     73e:	e0 91 03 01 	lds	r30, 0x0103

		/* name == IDLE or 0 < name <= MAXNAME */
		if (name <= MAXNAME) {
     742:	e9 30       	cpi	r30, 0x09	; 9
     744:	58 f3       	brcs	.-42     	; 0x71c <OS_Init+0x40>
     746:	f7 cf       	rjmp	.-18     	; 0x736 <OS_Init+0x5a>
		* Initialize dead pool to contain all but last task descriptor.
		*
		* DEAD == 0, already set in .init4
		*/
	for (i = 0; i < MAXPROCESS - 1; i++) {
		task_desc[i].state = DEAD;
     748:	10 82       	st	Z, r1
		name_to_task_ptr[i] = NULL;
     74a:	1d 92       	st	X+, r1
     74c:	1d 92       	st	X+, r1
		task_desc[i].next = &task_desc[i + 1];
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	84 9f       	mul	r24, r20
     752:	90 01       	movw	r18, r0
     754:	85 9f       	mul	r24, r21
     756:	30 0d       	add	r19, r0
     758:	94 9f       	mul	r25, r20
     75a:	30 0d       	add	r19, r0
     75c:	11 24       	eor	r1, r1
     75e:	20 5e       	subi	r18, 0xE0	; 224
     760:	3e 4f       	sbci	r19, 0xFE	; 254
     762:	35 83       	std	Z+5, r19	; 0x05
     764:	24 83       	std	Z+4, r18	; 0x04
     766:	e3 5f       	subi	r30, 0xF3	; 243
     768:	fe 4f       	sbci	r31, 0xFE	; 254
	/*
		* Initialize dead pool to contain all but last task descriptor.
		*
		* DEAD == 0, already set in .init4
		*/
	for (i = 0; i < MAXPROCESS - 1; i++) {
     76a:	87 30       	cpi	r24, 0x07	; 7
     76c:	91 05       	cpc	r25, r1
     76e:	61 f7       	brne	.-40     	; 0x748 <OS_Init+0x6c>
		task_desc[i].state = DEAD;
		name_to_task_ptr[i] = NULL;
		task_desc[i].next = &task_desc[i + 1];
	}
	task_desc[MAXPROCESS - 1].next = NULL;
     770:	10 92 83 09 	sts	0x0983, r1
     774:	10 92 82 09 	sts	0x0982, r1
	dead_pool_queue.head = &task_desc[0];
     778:	0f 2e       	mov	r0, r31
     77a:	f0 e2       	ldi	r31, 0x20	; 32
     77c:	cf 2e       	mov	r12, r31
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	df 2e       	mov	r13, r31
     782:	f0 2d       	mov	r31, r0
     784:	d0 92 a8 0a 	sts	0x0AA8, r13
     788:	c0 92 a7 0a 	sts	0x0AA7, r12
	dead_pool_queue.tail = &task_desc[MAXPROCESS - 1];
     78c:	8b e7       	ldi	r24, 0x7B	; 123
     78e:	98 e0       	ldi	r25, 0x08	; 8
     790:	90 93 aa 0a 	sts	0x0AAA, r25
     794:	80 93 a9 0a 	sts	0x0AA9, r24

	/* Create idle "task" */
	kernel_request_create_args.f = (voidfuncvoid_ptr) idle;
     798:	0f 2e       	mov	r0, r31
     79a:	f5 e1       	ldi	r31, 0x15	; 21
     79c:	ef 2e       	mov	r14, r31
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	ff 2e       	mov	r15, r31
     7a2:	f0 2d       	mov	r31, r0
     7a4:	87 e6       	ldi	r24, 0x67	; 103
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	d7 01       	movw	r26, r14
     7aa:	11 96       	adiw	r26, 0x01	; 1
     7ac:	9c 93       	st	X, r25
     7ae:	8e 93       	st	-X, r24
	kernel_request_create_args.level = NULL;
     7b0:	09 e1       	ldi	r16, 0x19	; 25
     7b2:	11 e0       	ldi	r17, 0x01	; 1
     7b4:	f8 01       	movw	r30, r16
     7b6:	10 82       	st	Z, r1
	kernel_create_task();
     7b8:	0e 94 0c 02 	call	0x418	; 0x418 <kernel_create_task>

	/* Create "main" task as SYSTEM level. */
	kernel_request_create_args.f = (voidfuncvoid_ptr) r_main;
     7bc:	8c e0       	ldi	r24, 0x0C	; 12
     7be:	98 e0       	ldi	r25, 0x08	; 8
     7c0:	d7 01       	movw	r26, r14
     7c2:	11 96       	adiw	r26, 0x01	; 1
     7c4:	9c 93       	st	X, r25
     7c6:	8e 93       	st	-X, r24
	kernel_request_create_args.level = SYSTEM;
     7c8:	83 e0       	ldi	r24, 0x03	; 3
     7ca:	f8 01       	movw	r30, r16
     7cc:	80 83       	st	Z, r24
	kernel_create_task();
     7ce:	0e 94 0c 02 	call	0x418	; 0x418 <kernel_create_task>

	/* First time through. Select "main" task to run first. */
	cur_task = task_desc;
     7d2:	d0 92 1f 01 	sts	0x011F, r13
     7d6:	c0 92 1e 01 	sts	0x011E, r12
	cur_task->state = RUNNING;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	80 93 23 02 	sts	0x0223, r24
	dequeue(&system_queue);
     7e0:	8b ea       	ldi	r24, 0xAB	; 171
     7e2:	9a e0       	ldi	r25, 0x0A	; 10
     7e4:	0e 94 2a 01 	call	0x254	; 0x254 <dequeue>

	/* Initilize time slot */
	if (PT> 0) {
     7e8:	ab 28       	or	r10, r11
     7ea:	21 f0       	breq	.+8      	; 0x7f4 <OS_Init+0x118>
		ticks_remaining = PPP[1];
     7ec:	80 91 04 01 	lds	r24, 0x0104
     7f0:	80 93 10 01 	sts	0x0110, r24
	}

	/* Set up Timer 1 Output Compare interrupt,the TICK clock. */
	TIMSK1 |= _BV(OCIE1A);
     7f4:	ef e6       	ldi	r30, 0x6F	; 111
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	82 60       	ori	r24, 0x02	; 2
     7fc:	80 83       	st	Z, r24
	OCR1A = TCNT1 + TICK_CYCLES;
     7fe:	80 91 84 00 	lds	r24, 0x0084
     802:	90 91 85 00 	lds	r25, 0x0085
     806:	81 50       	subi	r24, 0x01	; 1
     808:	98 42       	sbci	r25, 0x28	; 40
     80a:	90 93 89 00 	sts	0x0089, r25
     80e:	80 93 88 00 	sts	0x0088, r24
	/* Clear flag. */
	TIFR1 = _BV(OCF1A);
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	86 bb       	out	0x16, r24	; 22

	/* Initialize the now counter */
	cur_ticks = 0;
     816:	10 92 b0 0a 	sts	0x0AB0, r1
     81a:	10 92 af 0a 	sts	0x0AAF, r1
		} else {
			/* No task available, so idle. */
			cur_task = idle_task;
		}

		cur_task->state = RUNNING;
     81e:	bb 24       	eor	r11, r11
     820:	b3 94       	inc	r11
			cur_task = dequeue(&system_queue);
		} else if (!slot_task_finished && PT > 0
				&& name_to_task_ptr[PPP[slot_name_index]] != NULL) {
			/* Keep running the current PERIODIC task. */
			cur_task = name_to_task_ptr[PPP[slot_name_index]];
		} else if (rr_queue.head != NULL) {
     822:	0f 2e       	mov	r0, r31
     824:	fa eb       	ldi	r31, 0xBA	; 186
     826:	8f 2e       	mov	r8, r31
     828:	fa e0       	ldi	r31, 0x0A	; 10
     82a:	9f 2e       	mov	r9, r31
     82c:	f0 2d       	mov	r31, r0
	 */

	if (cur_task->state != RUNNING || cur_task == idle_task) {
		if (system_queue.head != NULL) {
			cur_task = dequeue(&system_queue);
		} else if (!slot_task_finished && PT > 0
     82e:	20 90 01 01 	lds	r2, 0x0101
     832:	30 90 02 01 	lds	r3, 0x0102
 *
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void sleep_enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add) {
	task_descriptor_t* next = queue_ptr->head;
     836:	04 ec       	ldi	r16, 0xC4	; 196
     838:	1a e0       	ldi	r17, 0x0A	; 10
		if ((tick_count + next->diff_ticks_remaining)
				>= kernal_request_sleep_ticks) {
			task_to_add->sleep_next = next;
			task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks
					- tick_count;
			next->diff_ticks_remaining -= task_to_add->diff_ticks_remaining;
     83a:	41 2c       	mov	r4, r1
     83c:	51 2c       	mov	r5, r1

			/* If cur is RR, it might be pre-empted by a new PERIODIC. */
			if (cur_task->level == RR && kernel_request_create_args.level
					== PERIODIC && PPP[slot_name_index]
					== kernel_request_create_args.name) {
				cur_task->state = READY;
     83e:	68 94       	set
     840:	aa 24       	eor	r10, r10
     842:	a1 f8       	bld	r10, 1
	/* PORTD ^= LED_D5_RED; */

	/* update the tick count each time we enter this function (timed interrupt fires once/tick) */
	cur_ticks++;

	if (PT > 0) {
     844:	31 01       	movw	r6, r2
				error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
				OS_Abort();
			}

			slot_name_index += 2;
			if (slot_name_index >= 2 * PT) {
     846:	91 01       	movw	r18, r2
     848:	22 0f       	add	r18, r18
     84a:	33 1f       	adc	r19, r19
     84c:	3a 83       	std	Y+2, r19	; 0x02
     84e:	29 83       	std	Y+1, r18	; 0x01
static void kernel_dispatch(void) {
	/* If the current state is RUNNING, then select it to run again.
	 * kernel_handle_request() has already determined it should be selected.
	 */

	if (cur_task->state != RUNNING || cur_task == idle_task) {
     850:	80 91 1e 01 	lds	r24, 0x011E
     854:	90 91 1f 01 	lds	r25, 0x011F
     858:	fc 01       	movw	r30, r24
     85a:	ed 5f       	subi	r30, 0xFD	; 253
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	20 81       	ld	r18, Z
     860:	21 30       	cpi	r18, 0x01	; 1
     862:	21 f4       	brne	.+8      	; 0x86c <OS_Init+0x190>
     864:	88 58       	subi	r24, 0x88	; 136
     866:	99 40       	sbci	r25, 0x09	; 9
     868:	09 f0       	breq	.+2      	; 0x86c <OS_Init+0x190>
     86a:	45 c0       	rjmp	.+138    	; 0x8f6 <OS_Init+0x21a>
		if (system_queue.head != NULL) {
     86c:	ab ea       	ldi	r26, 0xAB	; 171
     86e:	ba e0       	ldi	r27, 0x0A	; 10
     870:	8d 91       	ld	r24, X+
     872:	9c 91       	ld	r25, X
     874:	11 97       	sbiw	r26, 0x01	; 1
     876:	89 2b       	or	r24, r25
     878:	41 f0       	breq	.+16     	; 0x88a <OS_Init+0x1ae>
			cur_task = dequeue(&system_queue);
     87a:	cd 01       	movw	r24, r26
     87c:	0e 94 2a 01 	call	0x254	; 0x254 <dequeue>
     880:	90 93 1f 01 	sts	0x011F, r25
     884:	80 93 1e 01 	sts	0x011E, r24
     888:	2f c0       	rjmp	.+94     	; 0x8e8 <OS_Init+0x20c>
		} else if (!slot_task_finished && PT > 0
     88a:	80 91 be 0a 	lds	r24, 0x0ABE
     88e:	81 11       	cpse	r24, r1
     890:	18 c0       	rjmp	.+48     	; 0x8c2 <OS_Init+0x1e6>
     892:	21 14       	cp	r2, r1
     894:	31 04       	cpc	r3, r1
     896:	a9 f0       	breq	.+42     	; 0x8c2 <OS_Init+0x1e6>
				&& name_to_task_ptr[PPP[slot_name_index]] != NULL) {
     898:	e0 91 bf 0a 	lds	r30, 0x0ABF
     89c:	f0 91 c0 0a 	lds	r31, 0x0AC0
     8a0:	ed 5f       	subi	r30, 0xFD	; 253
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	e0 81       	ld	r30, Z
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	eb 56       	subi	r30, 0x6B	; 107
     8ae:	f5 4f       	sbci	r31, 0xF5	; 245
     8b0:	80 81       	ld	r24, Z
     8b2:	91 81       	ldd	r25, Z+1	; 0x01
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	29 f0       	breq	.+10     	; 0x8c2 <OS_Init+0x1e6>
			/* Keep running the current PERIODIC task. */
			cur_task = name_to_task_ptr[PPP[slot_name_index]];
     8b8:	90 93 1f 01 	sts	0x011F, r25
     8bc:	80 93 1e 01 	sts	0x011E, r24
     8c0:	13 c0       	rjmp	.+38     	; 0x8e8 <OS_Init+0x20c>
		} else if (rr_queue.head != NULL) {
     8c2:	f4 01       	movw	r30, r8
     8c4:	80 81       	ld	r24, Z
     8c6:	91 81       	ldd	r25, Z+1	; 0x01
     8c8:	89 2b       	or	r24, r25
     8ca:	41 f0       	breq	.+16     	; 0x8dc <OS_Init+0x200>
			cur_task = dequeue(&rr_queue);
     8cc:	c4 01       	movw	r24, r8
     8ce:	0e 94 2a 01 	call	0x254	; 0x254 <dequeue>
     8d2:	90 93 1f 01 	sts	0x011F, r25
     8d6:	80 93 1e 01 	sts	0x011E, r24
     8da:	06 c0       	rjmp	.+12     	; 0x8e8 <OS_Init+0x20c>
		} else {
			/* No task available, so idle. */
			cur_task = idle_task;
     8dc:	28 e8       	ldi	r18, 0x88	; 136
     8de:	39 e0       	ldi	r19, 0x09	; 9
     8e0:	30 93 1f 01 	sts	0x011F, r19
     8e4:	20 93 1e 01 	sts	0x011E, r18
		}

		cur_task->state = RUNNING;
     8e8:	e0 91 1e 01 	lds	r30, 0x011E
     8ec:	f0 91 1f 01 	lds	r31, 0x011F
     8f0:	ed 5f       	subi	r30, 0xFD	; 253
     8f2:	fe 4f       	sbci	r31, 0xFE	; 254
     8f4:	b0 82       	st	Z, r11
 */
static void kernel_main_loop(void) {
	for (;;) {
		kernel_dispatch();

		exit_kernel();
     8f6:	0e 94 68 00 	call	0xd0	; 0xd0 <exit_kernel>
 *
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waitng queue.
 */
static void kernel_handle_request(void) {
	switch (kernel_request) {
     8fa:	80 91 1b 01 	lds	r24, 0x011B
     8fe:	86 30       	cpi	r24, 0x06	; 6
     900:	09 f4       	brne	.+2      	; 0x904 <OS_Init+0x228>
     902:	28 c2       	rjmp	.+1104   	; 0xd54 <OS_Init+0x678>
     904:	88 f4       	brcc	.+34     	; 0x928 <OS_Init+0x24c>
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	09 f4       	brne	.+2      	; 0x90c <OS_Init+0x230>
     90a:	23 c1       	rjmp	.+582    	; 0xb52 <OS_Init+0x476>
     90c:	38 f4       	brcc	.+14     	; 0x91c <OS_Init+0x240>
     90e:	88 23       	and	r24, r24
     910:	09 f4       	brne	.+2      	; 0x914 <OS_Init+0x238>
     912:	bd c2       	rjmp	.+1402   	; 0xe8e <OS_Init+0x7b2>
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	09 f0       	breq	.+2      	; 0x91a <OS_Init+0x23e>
     918:	b5 c2       	rjmp	.+1386   	; 0xe84 <OS_Init+0x7a8>
     91a:	1a c0       	rjmp	.+52     	; 0x950 <OS_Init+0x274>
     91c:	84 30       	cpi	r24, 0x04	; 4
     91e:	09 f4       	brne	.+2      	; 0x922 <OS_Init+0x246>
     920:	8b c1       	rjmp	.+790    	; 0xc38 <OS_Init+0x55c>
     922:	08 f0       	brcs	.+2      	; 0x926 <OS_Init+0x24a>
     924:	b4 c2       	rjmp	.+1384   	; 0xe8e <OS_Init+0x7b2>
     926:	65 c1       	rjmp	.+714    	; 0xbf2 <OS_Init+0x516>
     928:	89 30       	cpi	r24, 0x09	; 9
     92a:	09 f4       	brne	.+2      	; 0x92e <OS_Init+0x252>
     92c:	e9 c1       	rjmp	.+978    	; 0xd00 <OS_Init+0x624>
     92e:	38 f4       	brcc	.+14     	; 0x93e <OS_Init+0x262>
     930:	87 30       	cpi	r24, 0x07	; 7
     932:	09 f4       	brne	.+2      	; 0x936 <OS_Init+0x25a>
     934:	a2 c1       	rjmp	.+836    	; 0xc7a <OS_Init+0x59e>
     936:	88 30       	cpi	r24, 0x08	; 8
     938:	09 f0       	breq	.+2      	; 0x93c <OS_Init+0x260>
     93a:	a4 c2       	rjmp	.+1352   	; 0xe84 <OS_Init+0x7a8>
     93c:	b2 c1       	rjmp	.+868    	; 0xca2 <OS_Init+0x5c6>
     93e:	8b 30       	cpi	r24, 0x0B	; 11
     940:	09 f4       	brne	.+2      	; 0x944 <OS_Init+0x268>
     942:	e8 c1       	rjmp	.+976    	; 0xd14 <OS_Init+0x638>
     944:	08 f4       	brcc	.+2      	; 0x948 <OS_Init+0x26c>
     946:	e1 c1       	rjmp	.+962    	; 0xd0a <OS_Init+0x62e>
     948:	8c 30       	cpi	r24, 0x0C	; 12
     94a:	09 f0       	breq	.+2      	; 0x94e <OS_Init+0x272>
     94c:	9b c2       	rjmp	.+1334   	; 0xe84 <OS_Init+0x7a8>
     94e:	f2 c1       	rjmp	.+996    	; 0xd34 <OS_Init+0x658>
 */
static void kernel_update_ticker(void) {
	/* PORTD ^= LED_D5_RED; */

	/* update the tick count each time we enter this function (timed interrupt fires once/tick) */
	cur_ticks++;
     950:	80 91 af 0a 	lds	r24, 0x0AAF
     954:	90 91 b0 0a 	lds	r25, 0x0AB0
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	90 93 b0 0a 	sts	0x0AB0, r25
     95e:	80 93 af 0a 	sts	0x0AAF, r24

	if (PT > 0) {
     962:	61 14       	cp	r6, r1
     964:	71 04       	cpc	r7, r1
     966:	09 f4       	brne	.+2      	; 0x96a <OS_Init+0x28e>
     968:	4b c0       	rjmp	.+150    	; 0xa00 <OS_Init+0x324>
		--ticks_remaining;
     96a:	80 91 10 01 	lds	r24, 0x0110
     96e:	81 50       	subi	r24, 0x01	; 1
     970:	80 93 10 01 	sts	0x0110, r24

		if (ticks_remaining == 0) {
     974:	80 91 10 01 	lds	r24, 0x0110
     978:	81 11       	cpse	r24, r1
     97a:	42 c0       	rjmp	.+132    	; 0xa00 <OS_Init+0x324>
			/* If Periodic task still running then error */
			if (cur_task != NULL && cur_task->level == PERIODIC
     97c:	80 91 1e 01 	lds	r24, 0x011E
     980:	90 91 1f 01 	lds	r25, 0x011F
     984:	00 97       	sbiw	r24, 0x00	; 0
     986:	79 f0       	breq	.+30     	; 0x9a6 <OS_Init+0x2ca>
     988:	fc 01       	movw	r30, r24
     98a:	ea 5f       	subi	r30, 0xFA	; 250
     98c:	fe 4f       	sbci	r31, 0xFE	; 254
     98e:	80 81       	ld	r24, Z
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	49 f4       	brne	.+18     	; 0x9a6 <OS_Init+0x2ca>
					&& slot_task_finished == 0) {
     994:	80 91 be 0a 	lds	r24, 0x0ABE
     998:	81 11       	cpse	r24, r1
     99a:	05 c0       	rjmp	.+10     	; 0x9a6 <OS_Init+0x2ca>
				/* error handling */
				error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
     99c:	88 e0       	ldi	r24, 0x08	; 8
     99e:	80 93 00 01 	sts	0x0100, r24
				OS_Abort();
     9a2:	0e 94 af 01 	call	0x35e	; 0x35e <OS_Abort>
			}

			slot_name_index += 2;
     9a6:	80 91 bf 0a 	lds	r24, 0x0ABF
     9aa:	90 91 c0 0a 	lds	r25, 0x0AC0
     9ae:	02 96       	adiw	r24, 0x02	; 2
			if (slot_name_index >= 2 * PT) {
     9b0:	69 81       	ldd	r22, Y+1	; 0x01
     9b2:	7a 81       	ldd	r23, Y+2	; 0x02
     9b4:	86 17       	cp	r24, r22
     9b6:	97 07       	cpc	r25, r23
     9b8:	28 f4       	brcc	.+10     	; 0x9c4 <OS_Init+0x2e8>
				/* error handling */
				error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
				OS_Abort();
			}

			slot_name_index += 2;
     9ba:	90 93 c0 0a 	sts	0x0AC0, r25
     9be:	80 93 bf 0a 	sts	0x0ABF, r24
     9c2:	04 c0       	rjmp	.+8      	; 0x9cc <OS_Init+0x2f0>
			if (slot_name_index >= 2 * PT) {
				slot_name_index = 0;
     9c4:	50 92 c0 0a 	sts	0x0AC0, r5
     9c8:	40 92 bf 0a 	sts	0x0ABF, r4
			}

			ticks_remaining = PPP[slot_name_index + 1];
     9cc:	e0 91 bf 0a 	lds	r30, 0x0ABF
     9d0:	f0 91 c0 0a 	lds	r31, 0x0AC0
     9d4:	ed 5f       	subi	r30, 0xFD	; 253
     9d6:	fe 4f       	sbci	r31, 0xFE	; 254
     9d8:	81 81       	ldd	r24, Z+1	; 0x01
     9da:	80 93 10 01 	sts	0x0110, r24

			if (PPP[slot_name_index] == IDLE
     9de:	e0 81       	ld	r30, Z
     9e0:	ee 23       	and	r30, r30
     9e2:	49 f0       	breq	.+18     	; 0x9f6 <OS_Init+0x31a>
					|| name_to_task_ptr[PPP[slot_name_index]] == NULL) {
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	eb 56       	subi	r30, 0x6B	; 107
     9ec:	f5 4f       	sbci	r31, 0xF5	; 245
     9ee:	80 81       	ld	r24, Z
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	89 2b       	or	r24, r25
     9f4:	19 f4       	brne	.+6      	; 0x9fc <OS_Init+0x320>
				slot_task_finished = 1;
     9f6:	b0 92 be 0a 	sts	0x0ABE, r11
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <OS_Init+0x324>
			} else {
				slot_task_finished = 0;
     9fc:	10 92 be 0a 	sts	0x0ABE, r1
			}
		}
	}

	/* Check sleeping tasks */
	if (sleep_queue.head != NULL) {
     a00:	d8 01       	movw	r26, r16
     a02:	8d 91       	ld	r24, X+
     a04:	9c 91       	ld	r25, X
     a06:	00 97       	sbiw	r24, 0x00	; 0
     a08:	09 f4       	brne	.+2      	; 0xa0c <OS_Init+0x330>
     a0a:	89 c0       	rjmp	.+274    	; 0xb1e <OS_Init+0x442>
		--(sleep_queue.head->diff_ticks_remaining);
     a0c:	fc 01       	movw	r30, r24
     a0e:	e5 5f       	subi	r30, 0xF5	; 245
     a10:	fe 4f       	sbci	r31, 0xFE	; 254
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	91 83       	std	Z+1, r25	; 0x01
     a1a:	80 83       	st	Z, r24
		uint8_t make_ready = 0;
     a1c:	d1 2c       	mov	r13, r1
			/* Check to see if current task needs to be pre-empted */
			if (cur_task != idle_task && !make_ready) {
				if (cur_task->level != SYSTEM && task_ptr->level == SYSTEM) {
					make_ready = 1;
				} else if (cur_task->level == RR && PT > 0
						&& slot_task_finished == 0 && task_ptr
     a1e:	c1 2c       	mov	r12, r1
     a20:	5c c0       	rjmp	.+184    	; 0xada <OS_Init+0x3fe>
 *
 */
static task_descriptor_t* sleep_dequeue(queue_t* queue_ptr) {
	task_descriptor_t* task_ptr = queue_ptr->head;

	if (queue_ptr->head != NULL) {
     a22:	e1 14       	cp	r14, r1
     a24:	f1 04       	cpc	r15, r1
     a26:	51 f0       	breq	.+20     	; 0xa3c <OS_Init+0x360>
		queue_ptr->head = queue_ptr->head->sleep_next;
     a28:	f7 01       	movw	r30, r14
     a2a:	e7 5f       	subi	r30, 0xF7	; 247
     a2c:	fe 4f       	sbci	r31, 0xFE	; 254
     a2e:	80 81       	ld	r24, Z
     a30:	91 81       	ldd	r25, Z+1	; 0x01
     a32:	d8 01       	movw	r26, r16
     a34:	8d 93       	st	X+, r24
     a36:	9c 93       	st	X, r25
		task_ptr->sleep_next = NULL;
     a38:	11 82       	std	Z+1, r1	; 0x01
     a3a:	10 82       	st	Z, r1
		uint8_t make_ready = 0;
		while (sleep_queue.head->diff_ticks_remaining == 0) {
			/* The waking task */
			task_descriptor_t* task_ptr = sleep_dequeue(&sleep_queue);

			task_ptr->state = READY;
     a3c:	f7 01       	movw	r30, r14
     a3e:	ed 5f       	subi	r30, 0xFD	; 253
     a40:	fe 4f       	sbci	r31, 0xFE	; 254
     a42:	a0 82       	st	Z, r10
			switch (task_ptr->level) {
     a44:	f7 01       	movw	r30, r14
     a46:	ea 5f       	subi	r30, 0xFA	; 250
     a48:	fe 4f       	sbci	r31, 0xFE	; 254
     a4a:	80 81       	ld	r24, Z
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	41 f0       	breq	.+16     	; 0xa60 <OS_Init+0x384>
     a50:	83 30       	cpi	r24, 0x03	; 3
     a52:	51 f4       	brne	.+20     	; 0xa68 <OS_Init+0x38c>
			case SYSTEM:
				enqueue(&system_queue, task_ptr);
     a54:	b7 01       	movw	r22, r14
     a56:	8b ea       	ldi	r24, 0xAB	; 171
     a58:	9a e0       	ldi	r25, 0x0A	; 10
     a5a:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <OS_Init+0x38c>
				break;
			case PERIODIC:
				break;
			case RR:
				enqueue(&rr_queue, task_ptr);
     a60:	b7 01       	movw	r22, r14
     a62:	c4 01       	movw	r24, r8
     a64:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
				break;
			default:
				break;
			}
			/* Check to see if current task needs to be pre-empted */
			if (cur_task != idle_task && !make_ready) {
     a68:	80 91 1e 01 	lds	r24, 0x011E
     a6c:	90 91 1f 01 	lds	r25, 0x011F
     a70:	b9 e0       	ldi	r27, 0x09	; 9
     a72:	88 38       	cpi	r24, 0x88	; 136
     a74:	9b 07       	cpc	r25, r27
     a76:	61 f1       	breq	.+88     	; 0xad0 <OS_Init+0x3f4>
     a78:	d1 10       	cpse	r13, r1
     a7a:	2a c0       	rjmp	.+84     	; 0xad0 <OS_Init+0x3f4>
				if (cur_task->level != SYSTEM && task_ptr->level == SYSTEM) {
     a7c:	fc 01       	movw	r30, r24
     a7e:	ea 5f       	subi	r30, 0xFA	; 250
     a80:	fe 4f       	sbci	r31, 0xFE	; 254
     a82:	80 81       	ld	r24, Z
     a84:	83 30       	cpi	r24, 0x03	; 3
     a86:	21 f1       	breq	.+72     	; 0xad0 <OS_Init+0x3f4>
     a88:	f7 01       	movw	r30, r14
     a8a:	ea 5f       	subi	r30, 0xFA	; 250
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	90 81       	ld	r25, Z
     a90:	93 30       	cpi	r25, 0x03	; 3
     a92:	e9 f0       	breq	.+58     	; 0xace <OS_Init+0x3f2>
					make_ready = 1;
				} else if (cur_task->level == RR && PT > 0
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	e1 f4       	brne	.+56     	; 0xad0 <OS_Init+0x3f4>
     a98:	61 14       	cp	r6, r1
     a9a:	71 04       	cpc	r7, r1
     a9c:	c9 f0       	breq	.+50     	; 0xad0 <OS_Init+0x3f4>
						&& slot_task_finished == 0 && task_ptr
     a9e:	80 91 be 0a 	lds	r24, 0x0ABE
     aa2:	81 11       	cpse	r24, r1
     aa4:	15 c0       	rjmp	.+42     	; 0xad0 <OS_Init+0x3f4>
						== name_to_task_ptr[PPP[slot_name_index]]) {
     aa6:	e0 91 bf 0a 	lds	r30, 0x0ABF
     aaa:	f0 91 c0 0a 	lds	r31, 0x0AC0
     aae:	ed 5f       	subi	r30, 0xFD	; 253
     ab0:	fe 4f       	sbci	r31, 0xFE	; 254
     ab2:	e0 81       	ld	r30, Z
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	eb 56       	subi	r30, 0x6B	; 107
     abc:	f5 4f       	sbci	r31, 0xF5	; 245
			/* Check to see if current task needs to be pre-empted */
			if (cur_task != idle_task && !make_ready) {
				if (cur_task->level != SYSTEM && task_ptr->level == SYSTEM) {
					make_ready = 1;
				} else if (cur_task->level == RR && PT > 0
						&& slot_task_finished == 0 && task_ptr
     abe:	db 2c       	mov	r13, r11
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
     ac4:	8e 15       	cp	r24, r14
     ac6:	9f 05       	cpc	r25, r15
     ac8:	19 f0       	breq	.+6      	; 0xad0 <OS_Init+0x3f4>
     aca:	dc 2c       	mov	r13, r12
     acc:	01 c0       	rjmp	.+2      	; 0xad0 <OS_Init+0x3f4>
				break;
			}
			/* Check to see if current task needs to be pre-empted */
			if (cur_task != idle_task && !make_ready) {
				if (cur_task->level != SYSTEM && task_ptr->level == SYSTEM) {
					make_ready = 1;
     ace:	db 2c       	mov	r13, r11
						&& slot_task_finished == 0 && task_ptr
						== name_to_task_ptr[PPP[slot_name_index]]) {
					make_ready = 1;
				}
			}
			if (sleep_queue.head == NULL) {
     ad0:	f8 01       	movw	r30, r16
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	89 2b       	or	r24, r25
     ad8:	59 f0       	breq	.+22     	; 0xaf0 <OS_Init+0x414>

	/* Check sleeping tasks */
	if (sleep_queue.head != NULL) {
		--(sleep_queue.head->diff_ticks_remaining);
		uint8_t make_ready = 0;
		while (sleep_queue.head->diff_ticks_remaining == 0) {
     ada:	d8 01       	movw	r26, r16
     adc:	ed 90       	ld	r14, X+
     ade:	fc 90       	ld	r15, X
     ae0:	f7 01       	movw	r30, r14
     ae2:	e5 5f       	subi	r30, 0xF5	; 245
     ae4:	fe 4f       	sbci	r31, 0xFE	; 254
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01
     aea:	89 2b       	or	r24, r25
     aec:	09 f4       	brne	.+2      	; 0xaf0 <OS_Init+0x414>
     aee:	99 cf       	rjmp	.-206    	; 0xa22 <OS_Init+0x346>
			}
			if (sleep_queue.head == NULL) {
				break;
			}
		}
		if (make_ready && cur_task != idle_task) {
     af0:	dd 20       	and	r13, r13
     af2:	a9 f0       	breq	.+42     	; 0xb1e <OS_Init+0x442>
     af4:	60 91 1e 01 	lds	r22, 0x011E
     af8:	70 91 1f 01 	lds	r23, 0x011F
     afc:	b9 e0       	ldi	r27, 0x09	; 9
     afe:	68 38       	cpi	r22, 0x88	; 136
     b00:	7b 07       	cpc	r23, r27
     b02:	69 f0       	breq	.+26     	; 0xb1e <OS_Init+0x442>
			cur_task->state = READY;
     b04:	fb 01       	movw	r30, r22
     b06:	ed 5f       	subi	r30, 0xFD	; 253
     b08:	fe 4f       	sbci	r31, 0xFE	; 254
     b0a:	a0 82       	st	Z, r10
			if (cur_task->level == RR) {
     b0c:	fb 01       	movw	r30, r22
     b0e:	ea 5f       	subi	r30, 0xFA	; 250
     b10:	fe 4f       	sbci	r31, 0xFE	; 254
     b12:	80 81       	ld	r24, Z
     b14:	81 30       	cpi	r24, 0x01	; 1
     b16:	19 f4       	brne	.+6      	; 0xb1e <OS_Init+0x442>
				enqueue(&rr_queue, cur_task);
     b18:	c4 01       	movw	r24, r8
     b1a:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>

	case TIMER_EXPIRED:
		kernel_update_ticker();

		/* Round robin tasks get pre-empted on every tick. */
		if (cur_task->level == RR && cur_task->state == RUNNING) {
     b1e:	60 91 1e 01 	lds	r22, 0x011E
     b22:	70 91 1f 01 	lds	r23, 0x011F
     b26:	fb 01       	movw	r30, r22
     b28:	ea 5f       	subi	r30, 0xFA	; 250
     b2a:	fe 4f       	sbci	r31, 0xFE	; 254
     b2c:	80 81       	ld	r24, Z
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	09 f0       	breq	.+2      	; 0xb34 <OS_Init+0x458>
     b32:	ad c1       	rjmp	.+858    	; 0xe8e <OS_Init+0x7b2>
     b34:	fb 01       	movw	r30, r22
     b36:	ed 5f       	subi	r30, 0xFD	; 253
     b38:	fe 4f       	sbci	r31, 0xFE	; 254
     b3a:	80 81       	ld	r24, Z
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	09 f0       	breq	.+2      	; 0xb42 <OS_Init+0x466>
     b40:	a6 c1       	rjmp	.+844    	; 0xe8e <OS_Init+0x7b2>
			cur_task->state = READY;
     b42:	fb 01       	movw	r30, r22
     b44:	ed 5f       	subi	r30, 0xFD	; 253
     b46:	fe 4f       	sbci	r31, 0xFE	; 254
     b48:	a0 82       	st	Z, r10
			enqueue(&rr_queue, cur_task);
     b4a:	c4 01       	movw	r24, r8
     b4c:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
     b50:	9e c1       	rjmp	.+828    	; 0xe8e <OS_Init+0x7b2>
		}
		break;

	case TASK_CREATE:
		kernel_request_retval = kernel_create_task();
     b52:	0e 94 0c 02 	call	0x418	; 0x418 <kernel_create_task>
     b56:	90 93 14 01 	sts	0x0114, r25
     b5a:	80 93 13 01 	sts	0x0113, r24

		/* Check if new task has higer priority, and that it wasn't an ISR
		 * making the request.
		 */
		if (kernel_request_retval) {
     b5e:	80 91 13 01 	lds	r24, 0x0113
     b62:	90 91 14 01 	lds	r25, 0x0114
     b66:	89 2b       	or	r24, r25
     b68:	09 f4       	brne	.+2      	; 0xb6c <OS_Init+0x490>
     b6a:	91 c1       	rjmp	.+802    	; 0xe8e <OS_Init+0x7b2>
			/* If new task is SYSTEM and cur is not, then don't run old one */
			if (kernel_request_create_args.level == SYSTEM && cur_task->level
     b6c:	80 91 19 01 	lds	r24, 0x0119
     b70:	83 30       	cpi	r24, 0x03	; 3
     b72:	79 f4       	brne	.+30     	; 0xb92 <OS_Init+0x4b6>
     b74:	80 91 1e 01 	lds	r24, 0x011E
     b78:	90 91 1f 01 	lds	r25, 0x011F
     b7c:	fc 01       	movw	r30, r24
     b7e:	ea 5f       	subi	r30, 0xFA	; 250
     b80:	fe 4f       	sbci	r31, 0xFE	; 254
     b82:	20 81       	ld	r18, Z
     b84:	23 30       	cpi	r18, 0x03	; 3
     b86:	09 f4       	brne	.+2      	; 0xb8a <OS_Init+0x4ae>
     b88:	82 c1       	rjmp	.+772    	; 0xe8e <OS_Init+0x7b2>
					!= SYSTEM) {
				cur_task->state = READY;
     b8a:	fc 01       	movw	r30, r24
     b8c:	ed 5f       	subi	r30, 0xFD	; 253
     b8e:	fe 4f       	sbci	r31, 0xFE	; 254
     b90:	a0 82       	st	Z, r10
			}

			/* If cur is RR, it might be pre-empted by a new PERIODIC. */
			if (cur_task->level == RR && kernel_request_create_args.level
     b92:	60 91 1e 01 	lds	r22, 0x011E
     b96:	70 91 1f 01 	lds	r23, 0x011F
     b9a:	fb 01       	movw	r30, r22
     b9c:	ea 5f       	subi	r30, 0xFA	; 250
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	80 81       	ld	r24, Z
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	09 f0       	breq	.+2      	; 0xba8 <OS_Init+0x4cc>
     ba6:	73 c1       	rjmp	.+742    	; 0xe8e <OS_Init+0x7b2>
     ba8:	80 91 19 01 	lds	r24, 0x0119
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	b1 f4       	brne	.+44     	; 0xbdc <OS_Init+0x500>
					== PERIODIC && PPP[slot_name_index]
					== kernel_request_create_args.name) {
     bb0:	80 91 1a 01 	lds	r24, 0x011A
				cur_task->state = READY;
			}

			/* If cur is RR, it might be pre-empted by a new PERIODIC. */
			if (cur_task->level == RR && kernel_request_create_args.level
					== PERIODIC && PPP[slot_name_index]
     bb4:	e0 91 bf 0a 	lds	r30, 0x0ABF
     bb8:	f0 91 c0 0a 	lds	r31, 0x0AC0
     bbc:	ed 5f       	subi	r30, 0xFD	; 253
     bbe:	fe 4f       	sbci	r31, 0xFE	; 254
     bc0:	90 81       	ld	r25, Z
     bc2:	98 13       	cpse	r25, r24
     bc4:	0b c0       	rjmp	.+22     	; 0xbdc <OS_Init+0x500>
					== kernel_request_create_args.name) {
				cur_task->state = READY;
     bc6:	fb 01       	movw	r30, r22
     bc8:	ed 5f       	subi	r30, 0xFD	; 253
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	a0 82       	st	Z, r10
			}

			/* enqueue READY RR tasks. */
			if (cur_task->level == RR && cur_task->state == READY) {
     bce:	fb 01       	movw	r30, r22
     bd0:	ea 5f       	subi	r30, 0xFA	; 250
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	80 81       	ld	r24, Z
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	41 f0       	breq	.+16     	; 0xbea <OS_Init+0x50e>
     bda:	59 c1       	rjmp	.+690    	; 0xe8e <OS_Init+0x7b2>
     bdc:	fb 01       	movw	r30, r22
     bde:	ed 5f       	subi	r30, 0xFD	; 253
     be0:	fe 4f       	sbci	r31, 0xFE	; 254
     be2:	80 81       	ld	r24, Z
     be4:	82 30       	cpi	r24, 0x02	; 2
     be6:	09 f0       	breq	.+2      	; 0xbea <OS_Init+0x50e>
     be8:	52 c1       	rjmp	.+676    	; 0xe8e <OS_Init+0x7b2>
				enqueue(&rr_queue, cur_task);
     bea:	c4 01       	movw	r24, r8
     bec:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
     bf0:	4e c1       	rjmp	.+668    	; 0xe8e <OS_Init+0x7b2>
			}
		}
		break;

	case TASK_TERMINATE:
		if (cur_task != idle_task) {
     bf2:	60 91 1e 01 	lds	r22, 0x011E
     bf6:	70 91 1f 01 	lds	r23, 0x011F
     bfa:	e9 e0       	ldi	r30, 0x09	; 9
     bfc:	68 38       	cpi	r22, 0x88	; 136
     bfe:	7e 07       	cpc	r23, r30
     c00:	09 f4       	brne	.+2      	; 0xc04 <OS_Init+0x528>
     c02:	45 c1       	rjmp	.+650    	; 0xe8e <OS_Init+0x7b2>
/**
 * @brief Kernel function to destroy the current task.
 */
static void kernel_terminate_task(void) {
	/* deallocate all resources used by this task */
	cur_task->state = DEAD;
     c04:	fb 01       	movw	r30, r22
     c06:	ed 5f       	subi	r30, 0xFD	; 253
     c08:	fe 4f       	sbci	r31, 0xFE	; 254
     c0a:	10 82       	st	Z, r1
	if (cur_task->level == PERIODIC) {
     c0c:	fb 01       	movw	r30, r22
     c0e:	ea 5f       	subi	r30, 0xFA	; 250
     c10:	fe 4f       	sbci	r31, 0xFE	; 254
     c12:	80 81       	ld	r24, Z
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	59 f4       	brne	.+22     	; 0xc2e <OS_Init+0x552>
		name_to_task_ptr[cur_task->name] = NULL;
     c18:	fb 01       	movw	r30, r22
     c1a:	ee 5f       	subi	r30, 0xFE	; 254
     c1c:	fe 4f       	sbci	r31, 0xFE	; 254
     c1e:	e0 81       	ld	r30, Z
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	eb 56       	subi	r30, 0x6B	; 107
     c28:	f5 4f       	sbci	r31, 0xF5	; 245
     c2a:	11 82       	std	Z+1, r1	; 0x01
     c2c:	10 82       	st	Z, r1
	}
	enqueue(&dead_pool_queue, cur_task);
     c2e:	87 ea       	ldi	r24, 0xA7	; 167
     c30:	9a e0       	ldi	r25, 0x0A	; 10
     c32:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
     c36:	2b c1       	rjmp	.+598    	; 0xe8e <OS_Init+0x7b2>
			kernel_terminate_task();
		}
		break;

	case TASK_NEXT:
		switch (cur_task->level) {
     c38:	e0 90 1e 01 	lds	r14, 0x011E
     c3c:	f0 90 1f 01 	lds	r15, 0x011F
     c40:	f7 01       	movw	r30, r14
     c42:	ea 5f       	subi	r30, 0xFA	; 250
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	80 81       	ld	r24, Z
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	59 f0       	breq	.+22     	; 0xc62 <OS_Init+0x586>
     c4c:	83 30       	cpi	r24, 0x03	; 3
     c4e:	19 f0       	breq	.+6      	; 0xc56 <OS_Init+0x57a>
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	71 f4       	brne	.+28     	; 0xc70 <OS_Init+0x594>
     c54:	09 c0       	rjmp	.+18     	; 0xc68 <OS_Init+0x58c>
		case SYSTEM:
			enqueue(&system_queue, cur_task);
     c56:	b7 01       	movw	r22, r14
     c58:	8b ea       	ldi	r24, 0xAB	; 171
     c5a:	9a e0       	ldi	r25, 0x0A	; 10
     c5c:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
     c60:	07 c0       	rjmp	.+14     	; 0xc70 <OS_Init+0x594>
			break;

		case PERIODIC:
			slot_task_finished = 1;
     c62:	b0 92 be 0a 	sts	0x0ABE, r11
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <OS_Init+0x594>
			break;

		case RR:
			enqueue(&rr_queue, cur_task);
     c68:	b7 01       	movw	r22, r14
     c6a:	c4 01       	movw	r24, r8
     c6c:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>

		default: /* idle_task */
			break;
		}

		cur_task->state = READY;
     c70:	f7 01       	movw	r30, r14
     c72:	ed 5f       	subi	r30, 0xFD	; 253
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	a0 82       	st	Z, r10
     c78:	0a c1       	rjmp	.+532    	; 0xe8e <OS_Init+0x7b2>
	case TASK_GET_ARG:
		/* Should not happen. Handled in task itself. */
		break;

	case EVENT_INIT:
		kernel_request_event_ptr = NULL;
     c7a:	50 92 c2 0a 	sts	0x0AC2, r5
     c7e:	40 92 c1 0a 	sts	0x0AC1, r4
		if (num_events_created < MAXEVENT) {
     c82:	20 91 c3 0a 	lds	r18, 0x0AC3
     c86:	28 30       	cpi	r18, 0x08	; 8
     c88:	08 f0       	brcs	.+2      	; 0xc8c <OS_Init+0x5b0>
     c8a:	01 c1       	rjmp	.+514    	; 0xe8e <OS_Init+0x7b2>
			/* Pass a number back to the task, but pretend it is a pointer.
			 * It is the index of the event_queue plus 1.
			 * (0 is return value for failure.)
			 */
			kernel_request_event_ptr = (EVENT *) (uint16_t) (num_events_created
					+ 1);
     c8c:	82 2f       	mov	r24, r18
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	01 96       	adiw	r24, 0x01	; 1
		if (num_events_created < MAXEVENT) {
			/* Pass a number back to the task, but pretend it is a pointer.
			 * It is the index of the event_queue plus 1.
			 * (0 is return value for failure.)
			 */
			kernel_request_event_ptr = (EVENT *) (uint16_t) (num_events_created
     c92:	90 93 c2 0a 	sts	0x0AC2, r25
     c96:	80 93 c1 0a 	sts	0x0AC1, r24
					+ 1);
			/*
			 event_queue[num_events_created].head = NULL;
			 event_queue[num_events_created].tail = NULL;
			 */
			++num_events_created;
     c9a:	2f 5f       	subi	r18, 0xFF	; 255
     c9c:	20 93 c3 0a 	sts	0x0AC3, r18
     ca0:	f6 c0       	rjmp	.+492    	; 0xe8e <OS_Init+0x7b2>
		}
		break;

	case EVENT_WAIT:
		/* idle_task does not wait. */
		if (cur_task != idle_task) {
     ca2:	60 91 1e 01 	lds	r22, 0x011E
     ca6:	70 91 1f 01 	lds	r23, 0x011F
     caa:	f9 e0       	ldi	r31, 0x09	; 9
     cac:	68 38       	cpi	r22, 0x88	; 136
     cae:	7f 07       	cpc	r23, r31
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <OS_Init+0x5d8>
     cb2:	ed c0       	rjmp	.+474    	; 0xe8e <OS_Init+0x7b2>
/**
 * @brief Kernel function to place current task in a waiting queue.
 */
static void kernel_event_wait(void) {
	/* Check the handle of the event to ensure that it is initialized. */
	uint8_t handle = (uint8_t) ((uint16_t) (kernel_request_event_ptr) - 1);
     cb4:	80 91 c1 0a 	lds	r24, 0x0AC1
     cb8:	81 50       	subi	r24, 0x01	; 1

	if (handle >= num_events_created) {
     cba:	90 91 c3 0a 	lds	r25, 0x0AC3
     cbe:	89 17       	cp	r24, r25
     cc0:	28 f0       	brcs	.+10     	; 0xccc <OS_Init+0x5f0>
		/* Error code. */
		error_msg = ERR_RUN_5_WAIT_ON_BAD_EVENT;
     cc2:	8a e0       	ldi	r24, 0x0A	; 10
     cc4:	80 93 00 01 	sts	0x0100, r24
		OS_Abort();
     cc8:	0e 94 af 01 	call	0x35e	; 0x35e <OS_Abort>
	} else if (cur_task->level == PERIODIC) {
     ccc:	fb 01       	movw	r30, r22
     cce:	ea 5f       	subi	r30, 0xFA	; 250
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	90 81       	ld	r25, Z
     cd4:	92 30       	cpi	r25, 0x02	; 2
     cd6:	29 f4       	brne	.+10     	; 0xce2 <OS_Init+0x606>
		error_msg = ERR_RUN_7_PERIODIC_CALLED_WAIT;
     cd8:	8c e0       	ldi	r24, 0x0C	; 12
     cda:	80 93 00 01 	sts	0x0100, r24
		OS_Abort();
     cde:	0e 94 af 01 	call	0x35e	; 0x35e <OS_Abort>
	} else {
		/* Place this task in a queue. */
		cur_task->state = WAITING;
     ce2:	fb 01       	movw	r30, r22
     ce4:	ed 5f       	subi	r30, 0xFD	; 253
     ce6:	fe 4f       	sbci	r31, 0xFE	; 254
     ce8:	93 e0       	ldi	r25, 0x03	; 3
     cea:	90 83       	st	Z, r25
		enqueue(&event_queue[handle], cur_task);
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	88 53       	subi	r24, 0x38	; 56
     cf8:	95 4f       	sbci	r25, 0xF5	; 245
     cfa:	0e 94 12 01 	call	0x224	; 0x224 <enqueue>
     cfe:	c7 c0       	rjmp	.+398    	; 0xe8e <OS_Init+0x7b2>
		}

		break;

	case EVENT_SIGNAL:
		kernel_event_signal(0 /* not broadcast */, 0 /* not task_next */);
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 c2 02 	call	0x584	; 0x584 <kernel_event_signal>
     d08:	c2 c0       	rjmp	.+388    	; 0xe8e <OS_Init+0x7b2>
		break;

	case EVENT_BROADCAST:
		kernel_event_signal(1 /* is broadcast */, 0 /* not task_next */);
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	8b 2d       	mov	r24, r11
     d0e:	0e 94 c2 02 	call	0x584	; 0x584 <kernel_event_signal>
     d12:	bd c0       	rjmp	.+378    	; 0xe8e <OS_Init+0x7b2>
		break;

	case EVENT_SIGNAL_AND_NEXT:
		if (cur_task->level == PERIODIC) {
     d14:	e0 91 1e 01 	lds	r30, 0x011E
     d18:	f0 91 1f 01 	lds	r31, 0x011F
     d1c:	ea 5f       	subi	r30, 0xFA	; 250
     d1e:	fe 4f       	sbci	r31, 0xFE	; 254
     d20:	80 81       	ld	r24, Z
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	11 f4       	brne	.+4      	; 0xd2a <OS_Init+0x64e>
			slot_task_finished = 1;
     d26:	b0 92 be 0a 	sts	0x0ABE, r11
		}

		kernel_event_signal(0 /* not broadcast */, 1 /* is task_next */);
     d2a:	6b 2d       	mov	r22, r11
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	0e 94 c2 02 	call	0x584	; 0x584 <kernel_event_signal>
     d32:	ad c0       	rjmp	.+346    	; 0xe8e <OS_Init+0x7b2>

		break;

	case EVENT_BROADCAST_AND_NEXT:
		if (cur_task->level == PERIODIC) {
     d34:	e0 91 1e 01 	lds	r30, 0x011E
     d38:	f0 91 1f 01 	lds	r31, 0x011F
     d3c:	ea 5f       	subi	r30, 0xFA	; 250
     d3e:	fe 4f       	sbci	r31, 0xFE	; 254
     d40:	80 81       	ld	r24, Z
     d42:	82 30       	cpi	r24, 0x02	; 2
     d44:	11 f4       	brne	.+4      	; 0xd4a <OS_Init+0x66e>
			slot_task_finished = 1;
     d46:	b0 92 be 0a 	sts	0x0ABE, r11
		}

		kernel_event_signal(1 /* is broadcast */, 1 /* is task_next */);
     d4a:	6b 2d       	mov	r22, r11
     d4c:	8b 2d       	mov	r24, r11
     d4e:	0e 94 c2 02 	call	0x584	; 0x584 <kernel_event_signal>
     d52:	9d c0       	rjmp	.+314    	; 0xe8e <OS_Init+0x7b2>
		break;
	case TASK_SLEEP:
		/* idle_task does not sleep. */
		if (cur_task != idle_task) {
     d54:	a0 91 1e 01 	lds	r26, 0x011E
     d58:	b0 91 1f 01 	lds	r27, 0x011F
     d5c:	29 e0       	ldi	r18, 0x09	; 9
     d5e:	a8 38       	cpi	r26, 0x88	; 136
     d60:	b2 07       	cpc	r27, r18
     d62:	09 f4       	brne	.+2      	; 0xd66 <OS_Init+0x68a>
     d64:	94 c0       	rjmp	.+296    	; 0xe8e <OS_Init+0x7b2>
	}
}

static void kernel_sleep_task(void) {
	/* Periodic tasks cannot sleep */
	if (cur_task->level == PERIODIC) {
     d66:	fd 01       	movw	r30, r26
     d68:	ea 5f       	subi	r30, 0xFA	; 250
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	80 81       	ld	r24, Z
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	29 f4       	brne	.+10     	; 0xd7c <OS_Init+0x6a0>
		error_msg = ERR_RUN_7_PERIODIC_CALLED_WAIT;
     d72:	8c e0       	ldi	r24, 0x0C	; 12
     d74:	80 93 00 01 	sts	0x0100, r24
		OS_Abort();
     d78:	0e 94 af 01 	call	0x35e	; 0x35e <OS_Abort>
	} else {
		/* Place this task in a queue. */
		cur_task->state = SLEEPING;
     d7c:	fd 01       	movw	r30, r26
     d7e:	ed 5f       	subi	r30, 0xFD	; 253
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	34 e0       	ldi	r19, 0x04	; 4
     d84:	30 83       	st	Z, r19
 *
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void sleep_enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add) {
	task_descriptor_t* next = queue_ptr->head;
     d86:	f8 01       	movw	r30, r16
     d88:	40 81       	ld	r20, Z
     d8a:	51 81       	ldd	r21, Z+1	; 0x01
	task_descriptor_t* prev = NULL;
	unsigned int tick_count = 0;
	if (queue_ptr->head == NULL) {
     d8c:	41 15       	cp	r20, r1
     d8e:	51 05       	cpc	r21, r1
     d90:	71 f0       	breq	.+28     	; 0xdae <OS_Init+0x6d2>
		task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks;
		return;
	}

	while (next != NULL) {
		if ((tick_count + next->diff_ticks_remaining)
     d92:	fa 01       	movw	r30, r20
     d94:	e5 5f       	subi	r30, 0xF5	; 245
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	60 81       	ld	r22, Z
     d9a:	71 81       	ldd	r23, Z+1	; 0x01
				>= kernal_request_sleep_ticks) {
     d9c:	80 91 11 01 	lds	r24, 0x0111
     da0:	90 91 12 01 	lds	r25, 0x0112
		task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks;
		return;
	}

	while (next != NULL) {
		if ((tick_count + next->diff_ticks_remaining)
     da4:	68 17       	cp	r22, r24
     da6:	79 07       	cpc	r23, r25
     da8:	08 f4       	brcc	.+2      	; 0xdac <OS_Init+0x6d0>
     daa:	4a c0       	rjmp	.+148    	; 0xe40 <OS_Init+0x764>
     dac:	7c c0       	rjmp	.+248    	; 0xea6 <OS_Init+0x7ca>
static void sleep_enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add) {
	task_descriptor_t* next = queue_ptr->head;
	task_descriptor_t* prev = NULL;
	unsigned int tick_count = 0;
	if (queue_ptr->head == NULL) {
		queue_ptr->head = task_to_add;
     dae:	f8 01       	movw	r30, r16
     db0:	b1 83       	std	Z+1, r27	; 0x01
     db2:	a0 83       	st	Z, r26
		task_to_add->sleep_next = NULL;
     db4:	fd 01       	movw	r30, r26
     db6:	e7 5f       	subi	r30, 0xF7	; 247
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	11 82       	std	Z+1, r1	; 0x01
     dbc:	10 82       	st	Z, r1
		task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks;
     dbe:	80 91 11 01 	lds	r24, 0x0111
     dc2:	90 91 12 01 	lds	r25, 0x0112
     dc6:	a5 5f       	subi	r26, 0xF5	; 245
     dc8:	be 4f       	sbci	r27, 0xFE	; 254
     dca:	8d 93       	st	X+, r24
     dcc:	9c 93       	st	X, r25
     dce:	5f c0       	rjmp	.+190    	; 0xe8e <OS_Init+0x7b2>
		return;
	}

	while (next != NULL) {
		if ((tick_count + next->diff_ticks_remaining)
     dd0:	fc 01       	movw	r30, r24
     dd2:	e5 5f       	subi	r30, 0xF5	; 245
     dd4:	fe 4f       	sbci	r31, 0xFE	; 254
     dd6:	20 81       	ld	r18, Z
     dd8:	31 81       	ldd	r19, Z+1	; 0x01
     dda:	26 0f       	add	r18, r22
     ddc:	37 1f       	adc	r19, r23
				>= kernal_request_sleep_ticks) {
     dde:	e0 91 11 01 	lds	r30, 0x0111
     de2:	f0 91 12 01 	lds	r31, 0x0112
		task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks;
		return;
	}

	while (next != NULL) {
		if ((tick_count + next->diff_ticks_remaining)
     de6:	2e 17       	cp	r18, r30
     de8:	3f 07       	cpc	r19, r31
     dea:	40 f1       	brcs	.+80     	; 0xe3c <OS_Init+0x760>
				>= kernal_request_sleep_ticks) {
			task_to_add->sleep_next = next;
     dec:	fd 01       	movw	r30, r26
     dee:	e7 5f       	subi	r30, 0xF7	; 247
     df0:	fe 4f       	sbci	r31, 0xFE	; 254
     df2:	91 83       	std	Z+1, r25	; 0x01
     df4:	80 83       	st	Z, r24
			task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks
					- tick_count;
     df6:	e0 90 11 01 	lds	r14, 0x0111
     dfa:	f0 90 12 01 	lds	r15, 0x0112
     dfe:	e6 1a       	sub	r14, r22
     e00:	f7 0a       	sbc	r15, r23

	while (next != NULL) {
		if ((tick_count + next->diff_ticks_remaining)
				>= kernal_request_sleep_ticks) {
			task_to_add->sleep_next = next;
			task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks
     e02:	fd 01       	movw	r30, r26
     e04:	e5 5f       	subi	r30, 0xF5	; 245
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	f1 82       	std	Z+1, r15	; 0x01
     e0a:	e0 82       	st	Z, r14
					- tick_count;
			next->diff_ticks_remaining -= task_to_add->diff_ticks_remaining;
     e0c:	fc 01       	movw	r30, r24
     e0e:	e5 5f       	subi	r30, 0xF5	; 245
     e10:	fe 4f       	sbci	r31, 0xFE	; 254
     e12:	20 81       	ld	r18, Z
     e14:	31 81       	ldd	r19, Z+1	; 0x01
     e16:	2e 19       	sub	r18, r14
     e18:	3f 09       	sbc	r19, r15
     e1a:	31 83       	std	Z+1, r19	; 0x01
     e1c:	20 83       	st	Z, r18
			if (prev == NULL) {
     e1e:	41 15       	cp	r20, r1
     e20:	51 05       	cpc	r21, r1
     e22:	31 f4       	brne	.+12     	; 0xe30 <OS_Init+0x754>
				queue_ptr->head = task_to_add;
     e24:	f8 01       	movw	r30, r16
     e26:	b1 83       	std	Z+1, r27	; 0x01
     e28:	a0 83       	st	Z, r26
		}
		tick_count += next->diff_ticks_remaining;
		prev = next;
		next = next->sleep_next;
	}
	if (next == NULL) {
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	81 f5       	brne	.+96     	; 0xe8e <OS_Init+0x7b2>
     e2e:	10 c0       	rjmp	.+32     	; 0xe50 <OS_Init+0x774>
					- tick_count;
			next->diff_ticks_remaining -= task_to_add->diff_ticks_remaining;
			if (prev == NULL) {
				queue_ptr->head = task_to_add;
			} else {
				prev->sleep_next = task_to_add;
     e30:	fa 01       	movw	r30, r20
     e32:	e7 5f       	subi	r30, 0xF7	; 247
     e34:	fe 4f       	sbci	r31, 0xFE	; 254
     e36:	b1 83       	std	Z+1, r27	; 0x01
     e38:	a0 83       	st	Z, r26
     e3a:	29 c0       	rjmp	.+82     	; 0xe8e <OS_Init+0x7b2>
		task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks;
		return;
	}

	while (next != NULL) {
		if ((tick_count + next->diff_ticks_remaining)
     e3c:	b9 01       	movw	r22, r18
			}
			break;
		}
		tick_count += next->diff_ticks_remaining;
		prev = next;
		next = next->sleep_next;
     e3e:	ac 01       	movw	r20, r24
     e40:	fa 01       	movw	r30, r20
     e42:	e7 5f       	subi	r30, 0xF7	; 247
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
		task_to_add->sleep_next = NULL;
		task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks;
		return;
	}

	while (next != NULL) {
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	09 f6       	brne	.-126    	; 0xdd0 <OS_Init+0x6f4>
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <OS_Init+0x776>
		}
		tick_count += next->diff_ticks_remaining;
		prev = next;
		next = next->sleep_next;
	}
	if (next == NULL) {
     e50:	ac 01       	movw	r20, r24
		prev->sleep_next = task_to_add;
     e52:	fa 01       	movw	r30, r20
     e54:	e7 5f       	subi	r30, 0xF7	; 247
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	b1 83       	std	Z+1, r27	; 0x01
     e5a:	a0 83       	st	Z, r26
		task_to_add->sleep_next = NULL;
     e5c:	fd 01       	movw	r30, r26
     e5e:	e7 5f       	subi	r30, 0xF7	; 247
     e60:	fe 4f       	sbci	r31, 0xFE	; 254
     e62:	11 82       	std	Z+1, r1	; 0x01
     e64:	10 82       	st	Z, r1
		queue_ptr->tail = task_to_add;
     e66:	b0 93 c7 0a 	sts	0x0AC7, r27
     e6a:	a0 93 c6 0a 	sts	0x0AC6, r26
		task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks
				- tick_count;
     e6e:	80 91 11 01 	lds	r24, 0x0111
     e72:	90 91 12 01 	lds	r25, 0x0112
	}
	if (next == NULL) {
		prev->sleep_next = task_to_add;
		task_to_add->sleep_next = NULL;
		queue_ptr->tail = task_to_add;
		task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks
     e76:	a5 5f       	subi	r26, 0xF5	; 245
     e78:	be 4f       	sbci	r27, 0xFE	; 254
				- tick_count;
     e7a:	86 1b       	sub	r24, r22
     e7c:	97 0b       	sbc	r25, r23
	}
	if (next == NULL) {
		prev->sleep_next = task_to_add;
		task_to_add->sleep_next = NULL;
		queue_ptr->tail = task_to_add;
		task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks
     e7e:	8d 93       	st	X+, r24
     e80:	9c 93       	st	X, r25
     e82:	05 c0       	rjmp	.+10     	; 0xe8e <OS_Init+0x7b2>
			kernel_sleep_task();
		}
		break;
	default:
		/* Should never happen */
		error_msg = ERR_RUN_8_RTOS_INTERNAL_ERROR;
     e84:	8d e0       	ldi	r24, 0x0D	; 13
     e86:	80 93 00 01 	sts	0x0100, r24
		OS_Abort();
     e8a:	0e 94 af 01 	call	0x35e	; 0x35e <OS_Abort>
		break;
	}

	kernel_request = NONE;
     e8e:	10 92 1b 01 	sts	0x011B, r1
     e92:	de cc       	rjmp	.-1604   	; 0x850 <OS_Init+0x174>
     e94:	e3 e2       	ldi	r30, 0x23	; 35
     e96:	f2 e0       	ldi	r31, 0x02	; 2
     e98:	a5 e9       	ldi	r26, 0x95	; 149
     e9a:	ba e0       	ldi	r27, 0x0A	; 10
 */
static void check_PPP_names(void) {
	uint8_t i;
	uint8_t name;

	for (i = 0; i < 2 * PT; i += 2) {
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
		* DEAD == 0, already set in .init4
		*/
	for (i = 0; i < MAXPROCESS - 1; i++) {
		task_desc[i].state = DEAD;
		name_to_task_ptr[i] = NULL;
		task_desc[i].next = &task_desc[i + 1];
     ea0:	4d e0       	ldi	r20, 0x0D	; 13
     ea2:	51 e0       	ldi	r21, 0x01	; 1
     ea4:	51 cc       	rjmp	.-1886   	; 0x748 <OS_Init+0x6c>
	}

	while (next != NULL) {
		if ((tick_count + next->diff_ticks_remaining)
				>= kernal_request_sleep_ticks) {
			task_to_add->sleep_next = next;
     ea6:	fd 01       	movw	r30, r26
     ea8:	e7 5f       	subi	r30, 0xF7	; 247
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	51 83       	std	Z+1, r21	; 0x01
     eae:	40 83       	st	Z, r20
			task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks
					- tick_count;
     eb0:	80 91 11 01 	lds	r24, 0x0111
     eb4:	90 91 12 01 	lds	r25, 0x0112

	while (next != NULL) {
		if ((tick_count + next->diff_ticks_remaining)
				>= kernal_request_sleep_ticks) {
			task_to_add->sleep_next = next;
			task_to_add->diff_ticks_remaining = kernal_request_sleep_ticks
     eb8:	fd 01       	movw	r30, r26
     eba:	e5 5f       	subi	r30, 0xF5	; 245
     ebc:	fe 4f       	sbci	r31, 0xFE	; 254
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	80 83       	st	Z, r24
					- tick_count;
			next->diff_ticks_remaining -= task_to_add->diff_ticks_remaining;
     ec2:	fa 01       	movw	r30, r20
     ec4:	e5 5f       	subi	r30, 0xF5	; 245
     ec6:	fe 4f       	sbci	r31, 0xFE	; 254
     ec8:	20 81       	ld	r18, Z
     eca:	31 81       	ldd	r19, Z+1	; 0x01
     ecc:	b9 01       	movw	r22, r18
     ece:	68 1b       	sub	r22, r24
     ed0:	79 0b       	sbc	r23, r25
     ed2:	71 83       	std	Z+1, r23	; 0x01
     ed4:	60 83       	st	Z, r22
     ed6:	ca 01       	movw	r24, r20
     ed8:	b2 01       	movw	r22, r4
     eda:	a4 cf       	rjmp	.-184    	; 0xe24 <OS_Init+0x748>

00000edc <Task_Create>:
*  The created process will belong to its scheduling @a level.
*  If the process is PERIODIC, then its @a name is a user-specified name
*  to be used in the PPP[] array. Otherwise, @a name is ignored.
* @sa @ref policy
*/
int Task_Create(void(*f)(void), int arg, unsigned int level, unsigned int name) {
     edc:	cf 93       	push	r28
	int retval;
	uint8_t sreg;

	sreg = SREG;
     ede:	cf b7       	in	r28, 0x3f	; 63
	cli();
     ee0:	f8 94       	cli

	kernel_request_create_args.f = (voidfuncvoid_ptr) f;
     ee2:	90 93 16 01 	sts	0x0116, r25
     ee6:	80 93 15 01 	sts	0x0115, r24
	kernel_request_create_args.arg = arg;
     eea:	70 93 18 01 	sts	0x0118, r23
     eee:	60 93 17 01 	sts	0x0117, r22
	kernel_request_create_args.level = (uint8_t) level;
     ef2:	40 93 19 01 	sts	0x0119, r20
	kernel_request_create_args.name = (uint8_t) name;
     ef6:	20 93 1a 01 	sts	0x011A, r18

	kernel_request = TASK_CREATE;
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	80 93 1b 01 	sts	0x011B, r24
	enter_kernel();
     f00:	0e 94 bd 00 	call	0x17a	; 0x17a <enter_kernel>

	retval = kernel_request_retval;
     f04:	20 91 13 01 	lds	r18, 0x0113
     f08:	30 91 14 01 	lds	r19, 0x0114
	SREG = sreg;
     f0c:	cf bf       	out	0x3f, r28	; 63

	return retval;
}
     f0e:	82 2f       	mov	r24, r18
     f10:	93 2f       	mov	r25, r19
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <Task_Next>:

/**
 * @brief The calling task gives up its share of the processor voluntarily.
 */
void Task_Next() {
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	1f 92       	push	r1
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
	uint8_t volatile sreg;

	sreg = SREG;
     f20:	8f b7       	in	r24, 0x3f	; 63
     f22:	89 83       	std	Y+1, r24	; 0x01
	cli();
     f24:	f8 94       	cli

	kernel_request = TASK_NEXT;
     f26:	84 e0       	ldi	r24, 0x04	; 4
     f28:	80 93 1b 01 	sts	0x011B, r24
	enter_kernel();
     f2c:	0e 94 bd 00 	call	0x17a	; 0x17a <enter_kernel>

	SREG = sreg;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	8f bf       	out	0x3f, r24	; 63
}
     f34:	0f 90       	pop	r0
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <Task_GetArg>:
 */
int Task_GetArg(void) {
	int arg;
	uint8_t sreg;

	sreg = SREG;
     f3c:	2f b7       	in	r18, 0x3f	; 63
	cli();
     f3e:	f8 94       	cli

	arg = cur_task->arg;
     f40:	e0 91 1e 01 	lds	r30, 0x011E
     f44:	f0 91 1f 01 	lds	r31, 0x011F
     f48:	ec 5f       	subi	r30, 0xFC	; 252
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
     f4c:	80 81       	ld	r24, Z
     f4e:	91 81       	ldd	r25, Z+1	; 0x01

	SREG = sreg;
     f50:	2f bf       	out	0x3f, r18	; 63

	return arg;
}
     f52:	08 95       	ret

00000f54 <Event_Init>:
/**
 * @brief Initialize a new, non-NULL Event descriptor.
 *
 * @return a non-NULL Event descriptor if successful; NULL otherwise.
 */
EVENT *Event_Init(void) {
     f54:	cf 93       	push	r28
	EVENT* event_ptr;
	uint8_t sreg;

	sreg = SREG;
     f56:	cf b7       	in	r28, 0x3f	; 63
	cli();
     f58:	f8 94       	cli

	kernel_request = EVENT_INIT;
     f5a:	87 e0       	ldi	r24, 0x07	; 7
     f5c:	80 93 1b 01 	sts	0x011B, r24
	enter_kernel();
     f60:	0e 94 bd 00 	call	0x17a	; 0x17a <enter_kernel>

	event_ptr = (EVENT *) kernel_request_event_ptr;
     f64:	80 91 c1 0a 	lds	r24, 0x0AC1
     f68:	90 91 c2 0a 	lds	r25, 0x0AC2

	SREG = sreg;
     f6c:	cf bf       	out	0x3f, r28	; 63

	return event_ptr;
}
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <main>:
}


int main()
{
	OS_Init();
     f72:	0e 94 6e 03 	call	0x6dc	; 0x6dc <OS_Init>

00000f76 <rr_task>:

void rr_task()
{
	for (;;)
	{
		Task_Next();
     f76:	0e 94 8b 07 	call	0xf16	; 0xf16 <Task_Next>
     f7a:	fd cf       	rjmp	.-6      	; 0xf76 <rr_task>

00000f7c <periodic_task>:
//const unsigned int PT = 0;
void periodic_task(void)
{
	//uint8_t i;
	uint8_t arg = 0;
	arg = Task_GetArg();
     f7c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Task_GetArg>
     f80:	c8 2f       	mov	r28, r24
	uint8_t v = 0b10000000;
	
	if (arg == A) v = _BV(PB0);
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	41 f0       	breq	.+16     	; 0xf96 <periodic_task+0x1a>
	else if (arg == B) v = _BV(PB1);
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	41 f0       	breq	.+16     	; 0xf9a <periodic_task+0x1e>
	else if (arg == C) v = _BV(PB2);
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	41 f0       	breq	.+16     	; 0xf9e <periodic_task+0x22>
	else if (arg == D) v = _BV(PB3);
     f8e:	84 30       	cpi	r24, 0x04	; 4
     f90:	41 f0       	breq	.+16     	; 0xfa2 <periodic_task+0x26>
void periodic_task(void)
{
	//uint8_t i;
	uint8_t arg = 0;
	arg = Task_GetArg();
	uint8_t v = 0b10000000;
     f92:	d0 e8       	ldi	r29, 0x80	; 128
     f94:	07 c0       	rjmp	.+14     	; 0xfa4 <periodic_task+0x28>
	
	if (arg == A) v = _BV(PB0);
     f96:	d1 e0       	ldi	r29, 0x01	; 1
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <periodic_task+0x28>
	else if (arg == B) v = _BV(PB1);
     f9a:	d2 e0       	ldi	r29, 0x02	; 2
     f9c:	03 c0       	rjmp	.+6      	; 0xfa4 <periodic_task+0x28>
	else if (arg == C) v = _BV(PB2);
     f9e:	d4 e0       	ldi	r29, 0x04	; 4
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <periodic_task+0x28>
	else if (arg == D) v = _BV(PB3);
     fa2:	d8 e0       	ldi	r29, 0x08	; 8
	//Event_Wait(e);	// periodic events can't wait!
	for(;;)
	{
		PORTB &= ~v;
     fa4:	1d 2f       	mov	r17, r29
     fa6:	10 95       	com	r17
     fa8:	85 b1       	in	r24, 0x05	; 5
     faa:	81 23       	and	r24, r17
     fac:	85 b9       	out	0x05, r24	; 5
		if (arg == A) _delay_ms(25);
     fae:	c1 30       	cpi	r28, 0x01	; 1
     fb0:	51 f4       	brne	.+20     	; 0xfc6 <periodic_task+0x4a>
     fb2:	2f ef       	ldi	r18, 0xFF	; 255
     fb4:	87 ed       	ldi	r24, 0xD7	; 215
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	21 50       	subi	r18, 0x01	; 1
     fba:	80 40       	sbci	r24, 0x00	; 0
     fbc:	90 40       	sbci	r25, 0x00	; 0
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <periodic_task+0x3c>
     fc0:	00 c0       	rjmp	.+0      	; 0xfc2 <periodic_task+0x46>
     fc2:	00 00       	nop
     fc4:	23 c0       	rjmp	.+70     	; 0x100c <periodic_task+0x90>
		else if (arg == B) _delay_ms(75);
     fc6:	c2 30       	cpi	r28, 0x02	; 2
     fc8:	51 f4       	brne	.+20     	; 0xfde <periodic_task+0x62>
     fca:	2f ef       	ldi	r18, 0xFF	; 255
     fcc:	87 e8       	ldi	r24, 0x87	; 135
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	21 50       	subi	r18, 0x01	; 1
     fd2:	80 40       	sbci	r24, 0x00	; 0
     fd4:	90 40       	sbci	r25, 0x00	; 0
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <periodic_task+0x54>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <periodic_task+0x5e>
     fda:	00 00       	nop
     fdc:	17 c0       	rjmp	.+46     	; 0x100c <periodic_task+0x90>
		else if (arg == C) _delay_ms(25);
     fde:	c3 30       	cpi	r28, 0x03	; 3
     fe0:	51 f4       	brne	.+20     	; 0xff6 <periodic_task+0x7a>
     fe2:	2f ef       	ldi	r18, 0xFF	; 255
     fe4:	87 ed       	ldi	r24, 0xD7	; 215
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	21 50       	subi	r18, 0x01	; 1
     fea:	80 40       	sbci	r24, 0x00	; 0
     fec:	90 40       	sbci	r25, 0x00	; 0
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <periodic_task+0x6c>
     ff0:	00 c0       	rjmp	.+0      	; 0xff2 <periodic_task+0x76>
     ff2:	00 00       	nop
     ff4:	0b c0       	rjmp	.+22     	; 0x100c <periodic_task+0x90>
		else if (arg == D) _delay_ms(75);
     ff6:	c4 30       	cpi	r28, 0x04	; 4
     ff8:	49 f4       	brne	.+18     	; 0x100c <periodic_task+0x90>
     ffa:	2f ef       	ldi	r18, 0xFF	; 255
     ffc:	87 e8       	ldi	r24, 0x87	; 135
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	21 50       	subi	r18, 0x01	; 1
    1002:	80 40       	sbci	r24, 0x00	; 0
    1004:	90 40       	sbci	r25, 0x00	; 0
    1006:	e1 f7       	brne	.-8      	; 0x1000 <periodic_task+0x84>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <periodic_task+0x8e>
    100a:	00 00       	nop
		PORTB |= v;
    100c:	85 b1       	in	r24, 0x05	; 5
    100e:	8d 2b       	or	r24, r29
    1010:	85 b9       	out	0x05, r24	; 5
		Task_Next();
    1012:	0e 94 8b 07 	call	0xf16	; 0xf16 <Task_Next>
	}
    1016:	c8 cf       	rjmp	.-112    	; 0xfa8 <periodic_task+0x2c>

00001018 <r_main>:
	}
}

int r_main(void)
{
	DDRB = 0xFF;
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	84 b9       	out	0x04, r24	; 4
	PORTB  = 0xFF;
    101c:	85 b9       	out	0x05, r24	; 5
	e = Event_Init();
    101e:	0e 94 aa 07 	call	0xf54	; 0xf54 <Event_Init>
    1022:	90 93 e9 0a 	sts	0x0AE9, r25
    1026:	80 93 e8 0a 	sts	0x0AE8, r24
	// Task_Create params: function, parameter, level, name
	Task_Create(periodic_task, A, PERIODIC, A);
    102a:	21 e0       	ldi	r18, 0x01	; 1
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	42 e0       	ldi	r20, 0x02	; 2
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	8e eb       	ldi	r24, 0xBE	; 190
    1038:	97 e0       	ldi	r25, 0x07	; 7
    103a:	0e 94 6e 07 	call	0xedc	; 0xedc <Task_Create>
	Task_Create(periodic_task, B, PERIODIC, B);
    103e:	22 e0       	ldi	r18, 0x02	; 2
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	42 e0       	ldi	r20, 0x02	; 2
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	62 e0       	ldi	r22, 0x02	; 2
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	8e eb       	ldi	r24, 0xBE	; 190
    104c:	97 e0       	ldi	r25, 0x07	; 7
    104e:	0e 94 6e 07 	call	0xedc	; 0xedc <Task_Create>
	Task_Create(periodic_task, C, PERIODIC, C);
    1052:	23 e0       	ldi	r18, 0x03	; 3
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	42 e0       	ldi	r20, 0x02	; 2
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	63 e0       	ldi	r22, 0x03	; 3
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	8e eb       	ldi	r24, 0xBE	; 190
    1060:	97 e0       	ldi	r25, 0x07	; 7
    1062:	0e 94 6e 07 	call	0xedc	; 0xedc <Task_Create>
	Task_Create(periodic_task, D, PERIODIC, D);
    1066:	24 e0       	ldi	r18, 0x04	; 4
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	42 e0       	ldi	r20, 0x02	; 2
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	64 e0       	ldi	r22, 0x04	; 4
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	8e eb       	ldi	r24, 0xBE	; 190
    1074:	97 e0       	ldi	r25, 0x07	; 7
    1076:	0e 94 6e 07 	call	0xedc	; 0xedc <Task_Create>
	Task_Create(rr_task, 0, RR, 50);
    107a:	22 e3       	ldi	r18, 0x32	; 50
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	8b eb       	ldi	r24, 0xBB	; 187
    1088:	97 e0       	ldi	r25, 0x07	; 7
    108a:	0e 94 6e 07 	call	0xedc	; 0xedc <Task_Create>
	return 0;
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	08 95       	ret

00001094 <_exit>:
    1094:	f8 94       	cli

00001096 <__stop_program>:
    1096:	ff cf       	rjmp	.-2      	; 0x1096 <__stop_program>
